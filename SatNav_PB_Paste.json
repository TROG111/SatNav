{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"db2","type":{"events":[],"methods":[]}},"3":{"name":"db1","type":{"events":[],"methods":[]}},"4":{"name":"dupSatnavDB","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"1"},"key":"0"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"6"},"key":"1"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"7"},"key":"2"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"8"},"key":"3"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"9"},"key":"4"},{"code":"--[[\n    SatNav version 2_1_2-merl1\n    Created By TrogLaByte\n\n    Discord: Trog#5105\n    InGame: TrogLaByte\n    \n    GNU Public License 3.0. Use whatever you want, be so kind to leave credit.\n\n    Thanks to Dorien Grey for his SVG and onscreen button code.\n]] \n-----------------------------------------------\n-- requirements\n-----------------------------------------------\n\nfunction initiateRequiredLibaries()\n    --json  = require('dkjson')\n    vec3  = require('cpml.vec3')\n    utils = require('cpml.utils')\n    planetRef = require('cpml.planetref')\n    referenceTableSource = require('cpml.atlas')\n    clamp  = utils.clamp\nend\nif pcall(initiateRequiredLibaries) then\n    system.print(\"Libaries loaded successfully\")\n    else\n    system.print(\"Libaries failed to load: check that the following libraries exist:\")\n    system.print(\"(<ProgrmData> is the directory in to which you installed DU)\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/dkjson\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/vec3\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/utils\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/planetref\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/atlas\")\n    system.print(\"\")\n    system.print(\"planetref.lua and atlas.lua can be obtained from the following GitLab url:\")\n    system.print(\"https://gitlab.com/JayleBreak/dualuniverse/-/tree/master/DUflightfiles/autoconf/custom\")\n    unit.exit()\nend\n-----------------------------------------------\n-- Global Variables\n-----------------------------------------------\n\nlocal version = \"2_1_2\"\n\nlocal UpdateInterval = 1 \nlocal defaultNewLocName = \"SatNav Location\" --export: default name used for new locations\n--[[Original colours are 34b1eb, 6e3de3 and 1e1e1e]]\nlocal PlanetPanelColour = \"99eeff\" --export: Hex code for colour of planet panel and buttons (you need to include the quotes)\nlocal LocPanelColour = \"aa99ff\" --export: Hex code for colour of locations panel and buttons (you need to include the quotes)\nlocal FontPanelColour = \"000000\" --export: Hex code for font colour of planet/locations panel (you need to include the quotes)\nlocal LineHighlightColour = \"ccffff\"--export: Hex code for colour of highlighted lines in planet/location panel (you need to include the quotes)\n\nlocal BackgroundColor = \"#1e1e1e\"\nlocal PlanetBackgroundColor = \"#\"  .. PlanetPanelColour\nlocal LocationBackgroundColor = \"#\"  .. LocPanelColour\nlocal MainFontColor = \"#\"  .. FontPanelColour\nlocal HighlightColor = \"#\"  .. LineHighlightColour\n\nlocal lastPlanetSelected = \"Alioth\" --export: The default start planet for displaying locations\n\nlocal clickAreas = {}\nlocal locList={}\npageLines=12\ndisplayPlanetList={}\ndisplayLocationList={}\nCurrentLocationPage = 1\nCurrentPlanetPage = 1\nmyDatabank={}\ndbHud={}\n\nif db1 then db1Keys = db1.getKeys() end\nif db2 then db2Keys = db2.getKeys() end\n\n--if db1Keys then system.print(\"DB1 Keys: \"..string.sub(db1Keys,1,50)) end\n--if db2Keys then system.print(\"DB2 Keys: \"..string.sub(db2Keys,1,50)) end\n\nif db1 and (db1Keys==nil or db1Keys == \"\" or string.match(db1Keys, \"lastNewLoc\")) then\n    myDatabank = db1\n    system.print(\"SatNav Databank Identified\")\nelseif db2 and (db2Keys==nil or db2Keys == \"\" or string.match(db2Keys, \"lastNewLoc\")) then\n    myDatabank = db2\n    system.print(\"SatNav Databank Identified\")\nelse \n    system.print(\"SatNav databank not found... application will stop\")\n    if db1Keys then system.print(\"DB1 Keys: \"..string.sub(db1Keys,1,50)) end\n    if db2Keys then system.print(\"DB2 Keys: \"..string.sub(db2Keys,1,50)) end\n    unit.exit()\n    unit.deactivate()\nend\n\nif myDatabank==db1 and db2 and string.match(db2Keys, \"AutopilotTargetIndex\") then\n    dbHud = db2\n    system.print(\"Dimencia Hud Identified\")\n    HUD = \"Dimencia\"\nelseif myDatabank==db2 and db1 and string.match(db1Keys, \"AutopilotTargetIndex\") then\n    dbHud = db1\n    system.print(\"Dimencia Hud Identified\")\n    HUD = \"Dimencia\"\nelse \n    system.print(\"No Dimencia Hud Identified - will run in Stand Alone mode\")\n    HUD = \"unknown\"\nend\n\n--unit.exit()\n-----------------------------------------------\n-- set up galaxy data and functions for planets and locations\n-----------------------------------------------\n\ngalaxyReference = planetRef(referenceTableSource)\nhelios = galaxyReference[0] -- PlanetaryReference.PlanetarySystem instance\nplanetList={}\nplanetDistList={}\nlocDistList={}\n\nfunction getBodyId(planetName)\n    for i=1,200 do\n        if helios[tonumber(i)] ~= nil then\n            if string.lower(helios[tonumber(i)].name) ==string.lower(planetName) then\n                return i\n            end\n        end\n    end\n    return 0\nend\n\nfunction buildPlanetList()\n    local planet={}\n    local currentLoc = vec3(core.getConstructWorldPos())\n    local shipMass = core.getConstructMass()\n    for i=1,200 do\n        if helios[tonumber(i)] ~= nil then\n            planet = helios[tonumber(i)]\n            planetList[#planetList+1] = planet.name\n            local planetDistance = planet:getDistance(currentLoc)\n            planetDistList[planet.name] = formatDistance(planetDistance) .. \n                string.format(\" [%.0f wc]\", ((planetDistance/200000)*(shipMass/1000)/4000))\n        end\n    end\n    planetList[#planetList+1]=\"Space\"\n    table.sort(planetList)\nend\n\nfunction formatDistance(distance)\n    if distance < 200000 then\n        return string.format(\"%.0f km\",distance/1000)\n    elseif distance < 4000000 then\n        return string.format(\"%.2f su\",distance/200000)\n    else\n        return string.format(\"%.0f su\",distance/200000)\n    end\nend\n\n-- json parser\n\n-- Extracts values from a JSON string with pattern matching\n-- This is faster than using dkjson when only a few fields are needed\n\n-- Use this only with trusted data sources! Limitations:\n-- * Character escapes are not supported\n-- * Field nesting is ignored\n\nlocal find, gsub = string.find, string.gsub\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return string|nil, number|nil, number|nil\nlocal function extractStringJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*\"([^\"]*)\"]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return number|nil, number|nil, number|nil\nlocal function extractNumberJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return boolean|nil, number|nil, number|nil\nlocal function extractBooleanJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([truefals]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n\n  if valueStr == \"true\" then\n    return true, startIndex, endIndex\n  elseif valueStr == \"false\" then\n    return false, startIndex, endIndex\n  else\n    return nil\n  end\nend\n\n---@param extractJsonValue function\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue any|nil\n---@return any[]\nlocal function extractAllJsonValues (extractJsonValue, json, key, stopAfterIndex, stopAfterValue)\n  local values = {}\n  local valuesLen = 0\n\n  local jsonPos = 1\n  local value, valueStartIndex, valueEndIndex -- luacheck: ignore valueStartIndex -- unused\n\n  repeat\n    value, valueStartIndex, valueEndIndex = extractJsonValue(json, key, jsonPos)\n\n    if value ~= nil then\n      valuesLen = valuesLen + 1\n      values[valuesLen] = value\n\n      jsonPos = valueEndIndex + 1\n    end\n\n    if value == stopAfterValue then break end\n    if valuesLen == stopAfterIndex then break end\n  until value == nil\n\n  return values\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue string|nil\n---@return string[]\nlocal function extractAllStringJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractStringJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue number|nil\n---@return number[]\nlocal function extractAllNumberJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractNumberJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue boolean|nil\n---@return boolean[]\nlocal function extractAllBooleanJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractBooleanJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n-- end json Parser\n\n\nfunction buildPlanetLocList(planetName)\n    local savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local atmosphere={}\n    local gravity={}\n    local planetname = {}\n    local posX\t   = {}\n    local posY\t   = {}\n    local posZ\t   = {}\n    local name\t   = {}\n\n    atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n    gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n    planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n    posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n    posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n    posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n    name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n   \n    local currentLoc = vec3(core.getConstructWorldPos())\n    local shipMass = core.getConstructMass()\n    local planet={}\n    locList={}\n    if planetName ~= \"Space\" then\n        table.insert(locList, planetName)  -- add planet name into the list as a default\n        locDistList[planetName] = planetDistList[planetName]\n    end\n    if #name > 0 then \n        for i=1,#name do\n            if string.lower(planetname[i]) == string.lower(planetName) or\n               string.find(string.lower(planetname[i]),string.lower(planetName))\n               then\n                    table.insert(locList, name[i])\n            elseif planetname[i] == \"\" and planetName == \"Space\" then -- a space location\n                table.insert(locList, name[i])\n            end\n            local locDistance = (currentLoc - vec3(posX[i],posY[i],posZ[i])):len()\n            if planetName == \"Space\" then\n                locDistList[name[i]] = formatDistance(locDistance) ..\n                string.format(\" [%.0f wc]\", ((locDistance/200000)*(shipMass/1000)/4000))\n            else\n                locDistList[name[i]] = formatDistance(locDistance)\n            end\n         end\n    end\n    table.sort(locList)\nend\n\nfunction printLocMapPos(locationName)\n    local savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local wayPoint=\"\"\n    local atmosphere={}\n    local gravity={}\n    local planetname = {}\n    local posX\t   = {}\n    local posY\t   = {}\n    local posZ\t   = {}\n    local name\t   = {}\n    atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n    gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n    planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n    posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n    posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n    posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n    name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n    local planet={}\n    if #name > 0 then \n        for i = 1, #name do\n              if string.lower(name[i]) == string.lower(locationName) then\n                    local bodyId = getBodyId(planetname[i])\n                    planet = helios[tonumber(bodyId)] \n                    if planet ~= nil then\n                        worldCoords = planet:convertToMapPosition(vec3(posX[i],posY[i],posZ[i]))\n                        wayPoint=string.format([[::pos{%d,%d,%f,%f,%f}]],\n                            worldCoords.systemId,\n                            worldCoords.bodyId,\n                            worldCoords.latitude*constants.rad2deg,\n                            worldCoords.longitude*constants.rad2deg,\n                            worldCoords.altitude)\n                        system.print(name[i]..\" @ \"..wayPoint)\n                        system.setWaypoint(wayPoint)\n                        return locationName,\n                            planetname[i],\n                            atmosphere[i],\n                            gravity[i],\n                            posX[i],\n                            posY[i],\n                            posZ[i]\n                    else\n                        wayPoint=string.format([[::pos{%d,%d,%f,%f,%f}]],\n                            0,\n                            bodyId,\n                            posX[i],posY[i],posZ[i])\n                        system.print(name[i]..\" @ \"..wayPoint)\n                        system.setWaypoint(wayPoint)\n                        return locationName,\n                            planetname[i],\n                            atmosphere[i],\n                            gravity[i],\n                            posX[i],\n                            posY[i],\n                            posZ[i]\n                    end\n                    break\n              end   \n         end\n    end\n    return \"\"\nend\n\nfunction clearSavedLocations()\n    myDatabank.setStringValue(\"SavedLocations\",\"[]\")\n    system.print(\"Satnav Databank cleared\")\nend\n\nfunction isDuplicateLocation(locName, locNameList)\n    for i=1,#locNameList do\n        if locNameList[i] == locName then\n            return locName\n        end\n    end\n    return \"\"\nend\n\nfunction saveSavedLocations (name, planetname, atmosphere, gravity, posX, posY, posZ)\n    local newSavedLocations = \"[\"\n    for i = 1, #name do\n        if name[i]~=\"\" then\n              newSavedLocations = newSavedLocations..\n                            \"{\"..[[\"name\":\"]]..name[i]..\n                                 [[\",\"planetname\":\"]]..planetname[i]..[[\"]]..\n                                 [[,\"atmosphere\":]]..atmosphere[i]..\n                                 [[,\"gravity\":]]..gravity[i]..\n                                 [[,\"position\":{\"x\":]]..posX[i]..\n                                 [[,\"y\":]]..posY[i]..\n                                 [[,\"z\":]]..posZ[i]..[[}}]]\n        end\n        if i+1<#name then\n            newSavedLocations= newSavedLocations..\",\"\n        end\n    end\n    newSavedLocations= newSavedLocations..\"]\"     \n    --system.print(newSavedLocations)\n    myDatabank.setStringValue(\"SavedLocations\",newSavedLocations)\n    system.print(\"Satnav Databank Updated\")\nend\n\nfunction updateLocationName(newLocName)\n    if newLocName ~= nil and newLocName ~= \"\" and \n       lastLocationSelected ~= nil and lastLocationSelected ~= \"\" then\n        system.print(\"Updating location name for: \"..lastLocationSelected..\" to: \"..newLocName)\n    else\n        system.print(\"Invalid update request\")\n        return\n    end\n    local savedLocation = {}\n    local oldLocFound = false\n    savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local atmosphere={}\n    local gravity={}\n    local planetname = {}\n    local posX\t   = {}\n    local posY\t   = {}\n    local posZ\t   = {}\n    local name\t   = {}\n    atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n    gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n    planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n    posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n    posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n    posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n    name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n    for i = 1, #name do\n        if name[i] == lastLocationSelected then\n            --system.print(\"Found: \"..lastLocationSelected)\n            name[i] = newLocName\n            oldLocFound = true\n            break\n        end\n    end\n    \n    if oldLocFound then   \n        saveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ)\n    else\n        system.print(\"Old Location Name Not Found\")\n    end\nend\n\nfunction deleteLocationName(delLocName)\n    if delLocName ~= nil and delLocName ~= \"\" then\n        system.print(\"Deleting location name: \"..delLocName)\n    else\n        system.print(\"Invalid update request\")\n        return\n    end\n    local savedLocation = {}\n    local oldLocFound = false\n    savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local atmosphere={}\n    local gravity={}\n    local planetname = {}\n    local posX\t   = {}\n    local posY\t   = {}\n    local posZ\t   = {}\n    local name\t   = {}\n    atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n    gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n    planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n    posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n    posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n    posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n    name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n    for i = 1, #name do\n        if name[i] == delLocName then\n            --system.print(\"Found: \"..delLocName)\n            name[i] = \"\"\n            oldLocFound = true\n            break\n        end\n    end\n    \n    if oldLocFound then   \n        saveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ)\n    else\n        system.print(\"Location Name Not Found\")\n    end\nend\n\nfunction loadPointsOfInterest()\n    -- get existing locations from SatNav Databank\n    local savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local atmosphere={}\n    local gravity={}\n    local planetname = {}\n    local posX\t   = {}\n    local posY\t   = {}\n    local posZ\t   = {}\n    local name\t   = {}\n\n    atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n    gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n    planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n    posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n    posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n    posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n    name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n\n\n    local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n    local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\n                   num ..  ',' .. num .. '}'\n    local j=0\n    loadLocationTable()\n    \n    for i = 1, #locationTable do\n        local newRef = #name + 1\n        if isDuplicateLocation(locationTable[i][1],name) == \"\" then\n            name[newRef]=locationTable[i][1]\n            local newLocPos = locationTable[i][2]\n            --system.print(\"Name: \"..locationTable[i][1]..\" \"..newLocPos)\n            local systemId, bodyId, latitude, longitude, altitude =\n                                            string.match(locationTable[i][2], posPattern)\n            --system.print(\"BodyId: \".. bodyId)\n            if tonumber(bodyId) > 0 then\n                local planet = helios[tonumber(bodyId)]   \n                local worldCoords = planet:convertToWorldCoordinates(newLocPos)\n                posX[newRef]=worldCoords[\"x\"]\n                posY[newRef]=worldCoords[\"y\"]\n                posZ[newRef]=worldCoords[\"z\"]\n                gravity[newRef]=core.g()\n                atmosphere[newRef]=unit.getAtmosphereDensity()\n                planetname[newRef]=planet.name\n            else -- it is a space location\n                posX[newRef]=latitude\n                posY[newRef]=longitude\n                posZ[newRef]=altitude\n                gravity[newRef]=0\n                atmosphere[newRef]=0\n                planetname[newRef]=\"\"\n            end        \n        else\n            system.print(\"Duplicate entry for location ignored: \"..locationTable[i][1])\n        end\n    end\n    saveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ)\n    --system.print(\"Default SatNav locations loaded\")\nend\n\nfunction loadHudLocations()\n    -- get existing locations from SatNav Databank\n    local savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local atmosphere={}\n    local gravity={}\n    local planetname = {}\n    local posX\t   = {}\n    local posY\t   = {}\n    local posZ\t   = {}\n    local name\t   = {}\n\n    atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n    gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n    planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n    posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n    posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n    posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n    name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n\n    local hudLocation = dbHud.getStringValue(\"SavedLocations\")\n    local hudatmosphere={}\n    local hudgravity={}\n    local hudplanetname = {}\n    local hudposX\t   = {}\n    local hudposY\t   = {}\n    local hudposZ\t   = {}\n    local hudname\t   = {}\n\n    hudatmosphere     = extractAllNumberJsonValues(hudLocation,\"atmosphere\")\n    hudgravity   = extractAllNumberJsonValues(hudLocation,\"gravity\")\n    hudplanetname = extractAllStringJsonValues(hudLocation,\"planetname\")\n    hudposX\t   = extractAllNumberJsonValues(hudLocation,\"x\")\n    hudposY\t   = extractAllNumberJsonValues(hudLocation,\"y\")\n    hudposZ\t   = extractAllNumberJsonValues(hudLocation,\"z\")\n    hudname\t   = extractAllStringJsonValues(hudLocation,\"name\")\n\n\n    for i = 1, #hudname do\n        local newRef = #name + 1\n        system.print(\"HudName: \"..hudname[i])\n        if isDuplicateLocation(hudname[i],name) == \"\" and\n           hudname[i] ~= \"SatNav Location\" then\n            name[newRef]=hudname[i]\n            posX[newRef]=hudposX[i]\n            posY[newRef]=hudposY[i]\n            posZ[newRef]=hudposZ[i]\n            gravity[newRef]=hudgravity[i]\n            atmosphere[newRef]=hudatmosphere[i]\n            planetname[newRef]=hudplanetname[i]      \n        else\n            system.print(\"Duplicate entry for location ignored: \"..hudname[i])\n        end\n    end\n    saveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ)\n    --system.print(\"Default SatNav locations loaded\")\nend\n\n\nfunction newLocation (xnewLocName, newLocPos)\n    local location\n    if xnewLocName and newLocPos then\n        location = newLocPos\n    else\n        location = system.getWaypointFromPlayerPos()\n    end\n    local newLocId = myDatabank.getIntValue(\"lastNewLoc\") + 1\n    myDatabank.setIntValue(\"lastNewLoc\",newLocId)\n    \n    local newLocName\n    if xnewLocName then\n        newLocName = xnewLocName\n    else\n        newLocName = defaultNewLocName..\" (\"..newLocId..\")\"\n    end\n    \n    local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n    local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\n                   num ..  ',' .. num .. '}'\n    \n    local savedLocation = {}\n    savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local atmosphere={}\n    local gravity={}\n    local planetname = {}\n    local posX\t   = {}\n    local posY\t   = {}\n    local posZ\t   = {}\n    local name\t   = {}\n    atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n    gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n    planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n    posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n    posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n    posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n    name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n    \n    local systemId, bodyId, latitude, longitude, altitude =\n                                 string.match(location, posPattern)\n    local worldPos = unit.getMasterPlayerRelativePosition()\n    local body = helios:closestBody(worldPos)\n    --system.print(json.encode(body))\n    --system.print(\"Distance=\"..((vec3(worldPos)-vec3(body.center)):len())/(1000))\n    --system.print(\"Calc=\"..((body.radius+body.center):len())/(1000))\n\n    newlocAlt = ((vec3(worldPos)-vec3(body.center)):len())/(1000)\n--    system.print(\"New Loc Alt:\"..newlocAlt)\n--    system.print(\"Radius:\"..(((body.radius)/1000) + 200))\n    if newlocAlt < (((body.radius)/1000) + 200) then\n        local bodyId = getBodyId(body.name)\n        --system.print(\"BodyId: \".. bodyId)\n        local planet = helios[tonumber(bodyId)]          -- PlanetaryReference.BodyParameters instance\n        --system.print(\"Planet BodyId: \".. planet.bodyId)\n        local worldCoords = planet:convertToWorldCoordinates(location)\n        newRef = #name + 1\n        name[newRef]=newLocName\n        posX[newRef]=worldCoords[\"x\"]\n        posY[newRef]=worldCoords[\"y\"]\n        posZ[newRef]=worldCoords[\"z\"]\n        gravity[newRef]=core.g()\n        atmosphere[newRef]=unit.getAtmosphereDensity()\n        planetname[newRef]=body.name\n    else\n        newRef = #name + 1\n        name[newRef]=newLocName\n        posX[newRef]=latitude\n        posY[newRef]=longitude\n        posZ[newRef]=altitude\n        gravity[newRef]=core.g()\n        atmosphere[newRef]=unit.getAtmosphereDensity()\n        planetname[newRef]=\"Space\"\n\n    end\n    saveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ)\n    system.print(\"New location: \"..newLocName..\" added to SatNav databank\")\n    printLocMapPos(newLocName)\nend\n\nfunction copySelectedToHud (locName)\n    \n    local locName, locplanetname, locatmosphere, locgravity, locX, locY, locZ = \n        printLocMapPos(locName)\n    if HUD == \"Dimencia\" then\n        savedLocation = dbHud.getStringValue(\"SavedLocations\")\n        --system.print(\"savedLocation=\"..savedLocation)\n        local atmosphere={}\n        local gravity={}\n        local planetname = {}\n        local posX\t   = {}\n        local posY\t   = {}\n        local posZ\t   = {}\n        local name\t   = {}\n        atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n        gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n        planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n        posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n        posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n        posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n        name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n        local newSavedLocations = \"[\"\n        for i = 1, #name do\n            if name[i] ~= \"SatNav Location\" then\n                newSavedLocations = newSavedLocations..\n                            \"{\"..[[\"name\":\"]]..name[i]..\n                                 [[\",\"planetname\":\"]]..planetname[i]..[[\"]]..\n                                 [[,\"atmosphere\":]]..atmosphere[i]..\n                                 [[,\"gravity\":]]..gravity[i]..\n                                 [[,\"position\":{\"x\":]]..posX[i]..\n                                 [[,\"y\":]]..posY[i]..\n                                 [[,\"z\":]]..posZ[i]..[[}},]]\n            end\n        end\n        if locplanetname ~= \"\" then\n            newSavedLocations = newSavedLocations..\n                            \"{\"..[[\"name\":\"]]..\"SatNav Location\"..\n                                 [[\",\"planetname\":\"]]..locplanetname..[[\"]]..\n                                 [[,\"atmosphere\":]]..locatmosphere..\n                                 [[,\"gravity\":]]..locgravity..\n                                 [[,\"position\":{\"x\":]]..locX..\n                                 [[,\"y\":]]..locY..\n                                 [[,\"z\":]]..locZ..[[}}]]\n        end\n        newSavedLocations= newSavedLocations..\"]\"        \n        dbHud.setStringValue(\"SavedLocations\",newSavedLocations)\n        dbHud.setStringValue(\"SPBAutopilotTargetName\",\"SatNav Location\")\n    end\nend\n\nfunction clearHudLocations()\n    if HUD == \"Dimencia\" then\n        dbHud.setStringValue(\"SavedLocations\",\"[]\")\n        dbHud.setStringValue(\"SPBAutopilotTargetName\",\"\")\n        system.print(\"Dimencia HUD Saved Locations Cleared\")\n    end\nend\n\nfunction duplicateSatnavDB()\n    local satnavLocation = myDatabank.getStringValue(\"SavedLocations\")\n    local lastNewLoc = myDatabank.getIntValue(\"lastNewLoc\")\n    if dupSatnavDB then\n        dupSatnavDB.clear()\n        dupSatnavDB.setStringValue(\"SavedLocations\",satnavLocation)\n        dupSatnavDB.setIntValue(\"lastNewLoc\",lastNewLoc)\n        system.print(\"SatNav Databank Duplicated Successfully\")\n    else\n        system.print(\"No space databank linked, duplication aborted\")\n    end\nend\n\nbuildPlanetList()\nbuildPlanetLocList(lastPlanetSelected)\nlocal planetCount=#planetList\n\n-----------------------------------------------\n-- Code for on screen buttons\n-----------------------------------------------\n\nfunction DrawSVG(output) screen.setSVG(output) end\n\nfunction AddClickArea(newEntry) table.insert(clickAreas, newEntry) end\n\nfunction RemoveFromClickAreas(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = nil\n            break\n        end\n    end\nend\n\nfunction UpdateClickArea(candidate, newEntry)\n    --system.print(\"Candidate: \"..candidate..\" x1\"..newEntry.x1)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = newEntry\n                    --system.print(\"Click Area: \"..candidate..\" x1\"..clickAreas[k].x1)\n            break\n        end\n    end\nend\n\nfunction DisableClickArea(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            UpdateClickArea(candidate, {\n                id = candidate,\n                x1 = -1,\n                x2 = -1,\n                y1 = -1,\n                y2 = -1\n            })\n            break\n        end\n    end\nend\n\nfunction InitiateClickAreas()\n    clickAreas = {}\n  \n    AddClickArea({id = \"LoadSatNavLocations\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"LoadHudLocations\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"NewLocation\", x1 = 700, x2 = 1100, y1 = 900, y2 = 1000})\n    AddClickArea({id = \"ClearHudLocations\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"PlanetPageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"PlanetPageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"LocationPageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"LocationPageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    \n    for i = 1, pageLines do\n        AddClickArea({id = string.format(\"PList%d\",i), x1 = 90, x2 = 800, y1 = (170 + i * 55), y2 = (225 + i * 55)})\n        AddClickArea({id = string.format(\"LList%d\",i), x1 = 1090, x2 = 1500, y1 = (170 + i * 55), y2 = (225 + i * 55)})\n    end\nend\n\nfunction FlushClickAreas() clickAreas = {} end\n\nfunction clearLocDispList()\n    for i=1,pageLines do\n        displayLocationList[i] = \"\"\n    end\nend\n\nfunction CheckClick(x, y, HitTarget)\n    HitTarget = HitTarget or \"\"\n    if HitTarget == \"\" then\n        for k, v in pairs(clickAreas) do\n            if v and x >= v.x1 and x <= v.x2 and y >= v.y1 and y <= v.y2 then\n                HitTarget = v.id\n                break\n            end\n        end\n    end\n  \n    --system.print(\"Target Hit = \"..HitTarget)\n    \n    if HitTarget == \"PlanetPageDown\" then\n        CurrentPlanetPage = CurrentPlanetPage+1\n        DrawPlanetList()\n    elseif HitTarget == \"PlanetPageUp\" then\n            CurrentPlanetPage = math.max(CurrentPlanetPage-1,0)\n            DrawPlanetList()\n    elseif HitTarget == \"LocationPageDown\" then\n            CurrentLocationPage = CurrentLocationPage+1\n            DrawPlanetList()\n    elseif HitTarget == \"LocationPageUp\" then\n            CurrentLocationPage = math.max(CurrentLocationPage-1,0)\n            DrawPlanetList()\n    elseif HitTarget == \"LoadSatNavLocations\" then\n            loadPointsOfInterest()\n            if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        lastLocationSelected = \"\"\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n            end\n    elseif HitTarget == \"LoadHudLocations\" then\n            loadHudLocations()\n            if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        lastLocationSelected = \"\"\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n            end \n    elseif HitTarget == \"ClearSatNavLocations\" then\n            system.print(\"ClearSavedLocations\")\n            clearSavedLocations()\n            system.print(\"defaul=\"..displayPlanetList[1])\n            if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        lastLocationSelected = \"\"\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n            end\n    elseif HitTarget == \"ClearHudLocations\" then\n            --system.print(\"ClearSavedLocations\")\n            clearHudLocations()\n    elseif HitTarget == \"NewLocation\" then\n            system.print(\"NewLocation\")\n            newLocation()\n            if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        lastLocationSelected = \"\"\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n            end\n    else\n            for i = 1,pageLines do\n                if HitTarget == string.format(\"PList%s\",i) then\n                    --system.print(\"PHitTarget: \"..HitTarget)\n                    if displayPlanetList[i] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[i]\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        DrawPlanetList()\n                    end\n                end\n                if HitTarget == string.format(\"LList%s\",i) then\n                    if displayLocationList[i] ~= \"\" then\n                        selected = displayLocationList[i]\n                        if HUD == \"Dimencia\" then\n                            copySelectedToHud(selected)\n                        end\n                        lastLocationSelected = selected\n                        selected = \"\"\n                        DrawPlanetList()\n                    end\n                end\n            end\n    end\nend\n\n-----------------------------------------------\n-- Code for building screen content and displaying it\n-----------------------------------------------\n\nlocal svgBootstrap = [[<svg class=\"bootstrap\" viewBox=\"0 0 1920 1120\" width=\"1920\" height=\"1120\">\n                <defs><style>\n                      .ftitle { font-size: 80px; text-anchor: start;fill: white; }\n                      .ftitlew { font-size: 60px; text-anchor: start;fill: red; }\n                      .ftitle2 { font-size: 60px; text-anchor: start;fill: #565656; }\n                      .ftopmiddle { font-size: 40px; text-anchor: middle;}\n                      .ftopend { font-size: 40px; text-anchor: end;}\n                      .fcapstart { font-size: 30px; text-anchor: start; fill: white;}\n                      .fcapstarthy { font-size: 30px; text-anchor: start; fill: yellow;}\n                      .fcapstarthr { font-size: 30px; text-anchor: start; fill: red;}\n                      .fcapmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fcapend { font-size: 30px; text-anchor: end; fill: white;}\n                      .fmstart { font-size: 25px; text-anchor: start; fill: white;}\n                      .fmstartg { font-size: 40px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmstartp { font-size: 40px; text-anchor: start; fill:]]..PlanetBackgroundColor..[[;}\n                      .fmstartl { font-size: 40px; text-anchor: start; fill:]]..LocationBackgroundColor..[[;}\n                      .fmstarty { font-size: 40px; text-anchor: start; fill: #aaaa00;}\n                      .fmstartb { font-size: 40px; text-anchor: end; fill: black;}\n                      .fmstartr { font-size: 40px; text-anchor: end; fill: #ff0000;}\n                      .fmmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fmmiddleb { font-size: 30px; text-anchor: middle; fill: black;}\n                      .fmmiddler { font-size: 30px; text-anchor: middle; fill: red;}\n                      .fmend { font-size: 25px; text-anchor: end; fill: ]]..MainFontColor..[[;}\n                </style></defs>]]\n\nfunction DrawPlanetList()\n\n    local screenOutput = \"\"\n\n        -- Draw Header\n    screenOutput = screenOutput .. svgBootstrap\n                           \n        -- Draw main background\n    screenOutput = screenOutput ..\n                       [[<rect width=\"1920\" height=\"1120\" style=\"fill: #]]..BackgroundColor..[[\"/><g></g>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"90\" y=\"50\" class=\"fmstart\">(Version: ]]..version..[[)</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"800\" y=\"50\" class=\"ftitle\">Sat Nav</text>]]\n    if HUD == \"Dimencia\" then\n        screenOutput = screenOutput ..\n                       [[<text x=\"1500\" y=\"50\" class=\"fmstart\">(Dimencia HUD enabled)</text>]]\n    else \n        screenOutput = screenOutput ..\n                       [[<text x=\"1500\" y=\"50\" class=\"fmstart\">(Standalone mode enabled)</text>]]\n    end\n    screenOutput = screenOutput ..\n                       [[<rect x=\"70\" y=\"150\" rx=\"10\" ry=\"10\" width=\"820\" height=\"]] ..\n                       ((pageLines + 1) * 55) ..\n                       [[\" style=\"fill:]].. PlanetBackgroundColor .. [[;stroke:#ffff00;stroke-width:3;\" />]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"80\" y=\"160\" rx=\"5\" ry=\"5\" width=\"800\" height=\"40\" style=\"fill:#33331a;\" />]]      \n    screenOutput = screenOutput ..\n                       [[<text x=\"90\" y=\"191\" class=\"fcapstart\">Planets</text>]]\n           \n\n    local i = 0\n    for j = 1 + (CurrentPlanetPage - 1) * pageLines, pageLines +\n                (CurrentPlanetPage - 1) * pageLines, 1 do\n        i = i + 1\n        if j < #planetList and j>0 then\n            local planetName = planetList[j]                          \n            if lastPlanetSelected == planetList[j] then\n                screenOutput = screenOutput ..\n                       [[<rect x=\"70\" y=\"]]..(140 + i * 55) .. \n                       [[\" width=\"820\" height=\"55\"]] ..\n                       [[\" style=\"fill:]].. HighlightColor .. [[;\" />]]\n            end\n            screenOutput = screenOutput .. [[<text x=\"90\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmstartg\">]] .. planetName ..  \n                                    [[</text>]]\n            if planetName ~= \"Space\" then\n            screenOutput = screenOutput .. [[<text x=\"875\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmend\">]] .. planetDistList[planetName] ..    \n                                   [[</text>]] \n            end\n            displayPlanetList[i]=planetList[j]\n        else\n            displayPlanetList[i]=\"\"\n        end\n    end\n   \n    if planetCount > 12 then\n                screenOutput = screenOutput ..\n                                   [[<text x=\"70\" y=\"1000\" class=\"fmstartp\">Page ]] ..\n                                   CurrentPlanetPage .. \" of \" ..\n                                   math.ceil(planetCount / 12) ..\n                                   [[</text>]]\n\n        if CurrentPlanetPage < math.ceil(planetCount / 12) then\n                    screenOutput = screenOutput .. [[<svg x=\"70\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..PlanetBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"PlanetPageDown\", {\n                        id = \"PlanetPageDown\",\n                        x1 = 70,\n                        x2 = 270,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"PlanetPageDown\")\n        end\n\n        if planetCount > 1 and CurrentPlanetPage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"280\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..PlanetBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"PlanetPageUp\", {\n                        id = \"PlanetPageUp\",\n                        x1 = 280,\n                        x2 = 480,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"PlanetPageUp\")\n        end\n    end\n    -- Start of Location List\n    screenOutput = screenOutput ..\n                       [[<rect x=\"1070\" y=\"150\" rx=\"10\" ry=\"10\" width=\"820\" height=\"]] ..\n                       ((pageLines + 1) * 55) ..\n                       [[\" style=\"fill:]]..\n                       LocationBackgroundColor..\n                       [[;stroke:#ffff00;stroke-width:3;\" />]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"1080\" y=\"160\" rx=\"5\" ry=\"5\" width=\"800\" height=\"40\" style=\"fill:#33331a;\" />]]      \n    screenOutput = screenOutput ..\n                       [[<text x=\"1090\" y=\"191\" class=\"fcapstart\">]].. lastPlanetSelected ..[[ Locations</text>]]\n           \n\n    local i = 0\n    for j = 1 + (CurrentLocationPage - 1) * pageLines, pageLines +\n                (CurrentLocationPage - 1) * pageLines, 1 do\n        \n        i = i + 1\n        if j <= #locList and j>0 then\n            if lastLocationSelected == locList[j] then\n                screenOutput = screenOutput ..\n                       [[<rect x=\"1080\" y=\"]]..(140 + i * 55) .. \n                       [[\" width=\"800\" height=\"55\"]] ..\n                       [[\" style=\"fill:]].. HighlightColor .. [[;\" />]]\n            end\n            screenOutput = screenOutput .. [[<text x=\"1090\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmstartg\">]] .. locList[j] ..  \n                                    [[</text>]]\n            displayLocationList[i]=locList[j]\n            screenOutput = screenOutput .. [[<text x=\"1875\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmend\">]] .. locDistList[locList[j]] ..    \n                                   [[</text>]] \n        else\n            displayLocationList[i]=\"\"\n        end\n    end\n   \n    if #locList > 12 then\n        screenOutput = screenOutput ..\n                                   [[<text x=\"1070\" y=\"1000\" class=\"fmstartl\">Page ]] ..\n                                   CurrentLocationPage .. \" of \" ..\n                                   math.ceil(#locList / 12) ..\n                                   [[</text>]]\n\n        if CurrentLocationPage < math.ceil(#locList / 12) then\n            screenOutput = screenOutput .. [[<svg x=\"1070\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..LocationBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"LocationPageDown\", {\n                        id = \"LocationPageDown\",\n                        x1 = 1070,\n                        x2 = 1270,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"LocationPageDown\")\n        end\n\n        if #locList > 1 and CurrentLocationPage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"1280\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..LocationBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"LocationPageUp\", {\n                        id = \"LocationPageUp\",\n                        x1 = 1280,\n                        x2 = 1480,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"LocationPageUp\")\n        end\n    end\n        \n--    screenOutput = screenOutput ..\n--                               [[<rect x=\"200\" y=\"900\" rx=\"10\" ry=\"10\" width=\"400\" height=\"60\" style=\"fill:#ff6666;\" />]] ..\n--                               [[<text x=\"400\" y=\"940\" class=\"fmmiddle\">Load SatNav DB</text>]]\n       \n    screenOutput = screenOutput ..\n                               [[<rect x=\"700\" y=\"900\" rx=\"10\" ry=\"10\" width=\"400\" height=\"60\" style=\"fill:#008015;\" />]] ..\n                               [[<text x=\"900\" y=\"940\" class=\"fmmiddle\">Save Current Location</text>]]\n\n--    screenOutput = screenOutput ..\n--                               [[<rect x=\"1200\" y=\"900\" rx=\"10\" ry=\"10\" width=\"400\" height=\"60\" style=\"fill:#ff6666;\" />]] ..\n--                               [[<text x=\"1400\" y=\"940\" class=\"fmmiddle\">Clear HUD Locs</text>]]\n\n\n    screenOutput = screenOutput .. [[</svg>]]\n\n    DrawSVG(screenOutput)\n\n    forceRedraw = false\nend\n\n-----------------------------------------------\n-- Execute\n-----------------------------------------------\n\nunit.hide()\nInitiateClickAreas()\nDrawPlanetList()\nsystem.print(\"Running\")\nunit.setTimer(\"loadwp\",1)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"5"},{"code":"function loadLocationTable ()\n    locationTable = {{}}\n    locationTable[1]                = {\"Alioth Market 1\", \"::pos{0,2,30.3314,101.3106,122.9764}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 2\", \"::pos{0,2,24.4469,88.0409,238.3019}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 3\", \"::pos{0,2,34.9734,87.3012,176.2188}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 4\", \"::pos{0,2,28.3352,99.5187,165.9078}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 5\", \"::pos{0,2,33.3939,87.3299,277.1366}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 6\", \"::pos{0,2,36.0044,101.3503,220.0897}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 7\", \"::pos{0,2,22.5024,98.1449,232.5154}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 8\", \"::pos{0,2,21.2154,93.9616,251.0768}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 9\", \"::pos{0,2,28.7133,85.6389,260.7636}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 10\", \"::pos{0,2,35.9865,91.8393,190.1616}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 11\", \"::pos{0,2,-1.0735,178.5062,69.9428}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 12\", \"::pos{0,2,22.7112,-92.3078,166.8481}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 13\", \"::pos{0,2,-23.3768,-10.5455,178.8458}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 14\", \"::pos{0,2,-73.4716,101.3697,89.5661}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 15\", \"::pos{0,2,61.7831,27.8517,54.9186}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 16\", \"::pos{0,2,23.4406,114.4179,211.1991}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 17\", \"::pos{0,2,37.8637,64.1825,151.5507}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 18\", \"::pos{0,2,49.9360,-170.7565,62.1982}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 19\", \"::pos{0,2,-32.7357,76.3764,209.0805}\"}\n    locationTable[#locationTable+1] = {\"Alioth Market 20\", \"::pos{0,2,-35.1535,-95.1230,301.0724}\"}   \n        \n    locationTable[#locationTable+1] = {\"Madis Market 1\", \"::pos{0,1,2.6476,176.8761,813.0974}\"}\n    locationTable[#locationTable+1] = {\"Madis Market 2\", \"::pos{0,1,10.3552,8.5146,816.2210}\"}\n    locationTable[#locationTable+1] = {\"Madis Market 3\", \"::pos{0,1,-0.2107,82.0779,809.5571}\"}\n    locationTable[#locationTable+1] = {\"Madis Market 4\", \"::pos{0,1,-80.6046,44.9385,822.6188}\"}\n    locationTable[#locationTable+1] = {\"Madis Market 5\", \"::pos{0,1,81.0827,5.3022,823.1976}\"}\n    locationTable[#locationTable+1] = {\"Madis Market 6\", \"::pos{0,1,13.9814,-91.6163,811.0679}\"}\n\n    locationTable[#locationTable+1] = {\"Thades M1: Market\", \"::pos{0,30,-2.9797,-117.7645,203.7519}\"}\n    locationTable[#locationTable+1] = {\"Feli: Market\", \"::pos{0,5,0.9348,178.6658,18417.2812}\"}\n    locationTable[#locationTable+1] = {\"Feli: Market 3\", \"::pos{0,5,-0.7500,-17.3248,18473.4238}\"}\n\n    locationTable[#locationTable+1] = {\"Symeon Market 1\", \"::pos{0,110,3.1400,-174.0223,267.1084}\"}\n    locationTable[#locationTable+1] = {\"Symeon Market 2\", \"::pos{0,110,-0.9862,88.3038,197.0626}\"}\n    locationTable[#locationTable+1] = {\"Symeon Market 3\", \"::pos{0,110,18.1117,11.1108,180.8022}\"}\n    locationTable[#locationTable+1] = {\"Symeon Market 4\", \"::pos{0,110,-26.9701,103.3741,186.2557}\"}\n    locationTable[#locationTable+1] = {\"Symeon Market 5\", \"::pos{0,110,83.1653,108.7807,142.5796}\"}\n    locationTable[#locationTable+1] = {\"Symeon Market 6\", \"::pos{0,110,-79.3167,95.3975,138.5268}\"}\n\n    locationTable[#locationTable+1] = {\"TMV Troghelm\", \"::pos{0,0,2416521.6598,1415126.8118,59323.7340}\"}\n    locationTable[#locationTable+1] = {\"TMV Alioth Factory\", \"::pos{0,2,22.8158,111.1414,103.5685}\"}\n    locationTable[#locationTable+1] = {\"TMV Feli Outpost\", \"::pos{0,5,23.6988,-77.8811,18480.5176}\"}\n    locationTable[#locationTable+1] = {\"TMV Thandes M1 Outpost\", \"::pos{0,30,-22.3548,-168.7352,288.1909}\"}\n    locationTable[#locationTable+1] = {\"TMV Madis Outpost\", \"::pos{0,1,-43.0914,75.0728,749.6641}\"}\n    locationTable[#locationTable+1] = {\"TMV Symoen Outpost\", \"::pos{0,110,-5.3046,32.6900,108.4144}\"}\n    locationTable[#locationTable+1] = {\"TMV Jago Outpost\", \"::pos{0,9,61.3760,-33.7830,10.7593}\"}\nend\n\nunit.stopTimer(\"loadwp\")\nloadLocationTable()\nlastNewLoc = myDatabank.getIntValue(\"lastNewLoc\")\n--system.print(\"lastNewLoc\"..lastNewLoc)\nif lastNewLoc == nil or lastNewLoc==0 then\n    --this is th first time satnav has run on this databank\n    system.print(\"Initialising SatNav Databank\")\n    CheckClick(0, 0, \"LoadSatNavLocations\")\n    lastNewLoc =1\n    myDatabank.setIntValue(\"lastNewLoc\",lastNewLoc)\n    system.print(\"Completed SatNav Databank\")\nend","filter":{"args":[{"value":"loadwp"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"6"},{"code":"if string.sub(text,1,2) == \"u \" then\n    local newLocName = string.sub(text,3,string.len(text))\n    updateLocationName(newLocName)\n    if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        lastLocationSelected = \"\"\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n    end\nelseif text == \"d SatNav\" then\n    deleteLocationName(lastLocationSelected)\n    if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        lastLocationSelected = \"\"\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n    end\nelseif text == \"c SatNav\" then\n    system.print(\"ClearSatNavLocations\")\n    CheckClick(0, 0, \"ClearSatNavLocations\")\nelseif text == \"c Hud\" then\n    if HUD == \"Dimencia\" then\n        system.print(\"ClearHudLocations\")\n        CheckClick(0, 0, \"ClearHudLocations\")\n    else\n        system.print(\"ClearHudLocations not available in standalone mode\")\n    end\nelseif text == \"l SatNav\" then\n    system.print(\"LoadSatNavLocations\")\n    CheckClick(0, 0, \"LoadSatNavLocations\")\nelseif text == \"l Hud\" then\n    if HUD == \"Dimencia\" then\n        system.print(\"LoadHudLocations\")\n        CheckClick(0, 0, \"LoadHudLocations\")\n    else\n        system.print(\"LoadHudLocations not available in standalone mode\")\n    end\nelseif text == \"x SatNav\" then\n    if dupSatnavDB then\n        system.print(\"DuplicateSatNavDB\")\n        duplicateSatnavDB()\n    else\n        system.print(\"Please link an empty databank to the programming board\")\n    end\nelseif string.sub(text,1,2) == \"a \" then\n    local newLocNamePos = text:find(\"}\") \n    if newLocNamePos > 0 then\n        -- @TODO: add more validation\n        local newLocPos = string.sub(text,3,newLocNamePos)\n        local newLocName = string.sub(text, newLocNamePos + 2, string.len(text))\n        newLocation(newLocName, newLocPos)\n        if displayPlanetList[1] ~= \"\" then\n            lastPlanetSelected = displayPlanetList[1]\n            lastLocationSelected = \"\"\n            buildPlanetLocList(lastPlanetSelected)\n            clearLocDispList()\n            selected = \"\"\n            CurrentLocationPage=1\n            CurrentPlanetPage=1\n            DrawPlanetList()\n        end\n    end\nend","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"7"}],"methods":[],"events":[]}