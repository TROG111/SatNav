{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"backupdb","type":{"events":[],"methods":[]}},"3":{"name":"dimhuddb","type":{"events":[],"methods":[]}},"4":{"name":"satnavdb1","type":{"events":[],"methods":[]}},"5":{"name":"Pilot1Switch","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"Pilot2Switch","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"1"},"key":"0"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"6"},"key":"1"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"7"},"key":"2"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"8"},"key":"3"},{"code":"--[[ Library of general utilities\n     Provides the functions:\n\t\tdebugMsg(msg) \t\t\t- where msg is a string to print\n\t\tcommerise(amount)\t\t- where amount is a numerical amount (string or number)\n\t\t\t\t\t\t\t\t- returns a string representation of amount with commas\n\t\tstring:split(delimiter) - where delimeter is a string (default is \" \")\n\t\t\t\t\t\t\t\t- returns a list of strings\n\t\tgetKeysSortedByValue(tbl, sortFunction)\n\t\t\t\t\t\t\t\t- where tbl is the existing unsorted table\n\t\t\t\t\t\t\t\t- sortFunction is a function that can order a pair of tbl valueStartIndex\n\t\t\t\t\t\t\t\t- returns a secondary index to table that has tbl values sorted\n\t\tremoveDuplicates(tbl)\t- where tbl is a table of values\n\t\t\t\t\t\t\t\t- returns a tbl with duplicates removed\n--]]\n\ndebug=false --export:\nfunction debugMsg(msg)\n\tif debug then\n        if not(msg==nil) then\n\t\tsystem.print(msg)\n\t   else \n\t\tsystem.print(\"nill debug msg\")\n\t   end\n     end\nend\n\nfunction commerise(amount)\n\tlocal num = tonumber(amount)\n\tlocal formatted=\"0\"\n\tif not(num==nil) and num>0 then\n\t\tif num < 1 then num = (math.floor(num*1000)/1000)\n\t\telseif num < 10 then num = (math.floor(num*100)/100)\n\t\telseif num < 100 then num = (math.floor(num*10)/10)\n\t\telse num=math.floor(num)\n\t\tend\n\t\tformatted = tostring(num)\n\telse\n\t\tformatted = amount\n\tend\n\twhile true do  \n\t\tformatted, k = string.gsub(formatted, \"^(-?%d+)(%d%d%d)\", '%1,%2')\n\t\tif (k==0) then\n\t\t  break\n\t\tend\n\tend\n  return formatted\nend\n\nfunction string:split(delimiter,maxLen)\n    --system.print(\"Self:\"..self)\n\tif not(delimeter) then delimiter = \" \" end\n\tlocal result = { }\n\tlocal from  = 1\n\tlocal delim_from, delim_to = string.find( self, delimiter, from  )\n\tlocal mapped = \"\"\n\tif maxLen == nil then maxLen=0 end\n\twhile delim_from do   \n\t\ttable.insert( result, string.sub( self, from , delim_from-1 ) )\n\t\tsubStr = string.sub( self, from , delim_from-1 )\n\t\tfrom  = delim_to + 1\n\t\tdelim_from, delim_to = string.find( self, delimiter, from  )\n\tend\n\ttable.insert( result, string.sub( self, from  ) )\n\tsubStr = string.sub( self, from  )\n\treturn result\nend\n\nfunction getKeysSortedByValue(tbl, sortFunction)\n  local keys = {}\n  for key in pairs(tbl) do\n    table.insert(keys, key)\n  end\n\n  table.sort(keys, function(a, b)\n    return sortFunction(tbl[a], tbl[b])\n  end)\n\n  return keys\nend\n\nfunction removeDuplicates(arr)\n\t    local newArray = {}\n\t    local checkerTbl = {}\n\t    for _, element in ipairs(arr) do\n\t        if not checkerTbl[element] then -- if there is not yet a value at the index of element, then it will be nil, which will operate like false in an if statement\n\t            checkerTbl[element] = true\n\t            table.insert(newArray, element)\n\t        end\n\t    end\n\t    return newArray\nend\n\n--[[ Library of json serialisation functions\n     Provides the functions:\n\t\textractAllStringJsonValues \t---@param json string\n\t\t\t\t\t\t\t\t\t---@param key string\n\t\t\t\t\t\t\t\t\t---@param init number|nil\n\t\t\t\t\t\t\t\t\t---@return list|nil, number|nil, number|nil\n\t\textractAllNumberJsonValues \n\t\textractAllBooleanJsonValues \n\t\textractAllListJsonValues \n--]]\nlocal find, gsub = string.find, string.gsub\n\nlocal function extractStringJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*\"([^\"]*)\"]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\nlocal function extractNumberJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\nlocal function extractBooleanJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([truefals]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n\n  if valueStr == \"true\" then\n    return true, startIndex, endIndex\n  elseif valueStr == \"false\" then\n    return false, startIndex, endIndex\n  else\n    return nil\n  end\nend\n\nfunction extractListJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*]]..\"(%[[%g^]%s]*%])\"\n  local startIndex, endIndex, valueStr = string.find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n\nlocal function extractAllJsonValues (extractJsonValue, json, key, stopAfterIndex, stopAfterValue)\n  local values = {}\n  local valuesLen = 0\n\n  local jsonPos = 1\n  local value, valueStartIndex, valueEndIndex -- luacheck: ignore valueStartIndex -- unused\n\n  repeat\n    value, valueStartIndex, valueEndIndex = extractJsonValue(json, key, jsonPos)\n\n    if value ~= nil then\n      valuesLen = valuesLen + 1\n      values[valuesLen] = value\n\n      jsonPos = valueEndIndex + 1\n    end\n\n    if value == stopAfterValue then break end\n    if valuesLen == stopAfterIndex then break end\n  until value == nil\n\n  return values\nend\n\nfunction extractAllStringJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractStringJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nfunction extractAllNumberJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractNumberJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nfunction extractAllBooleanJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractBooleanJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nfunction extractAllListJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractListJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nfunction deleteAllStringJsonValues (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*\"[^\"]*\"%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\nfunction deleteAllNumberJsonValues (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*-?[0-9.e-]+%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\nfunction deleteAllBooleanJsonValue (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*[truefals]+%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\n--[[ Library for replacing databanks with engne/etc... tags\n     Provides the functions:\n\t\tinitialiseDatabank( slot ) \t- where slot is either a databank or an element with getTags() function\n\t\t\t\t\t\t\t\t\t- return 0 (fail) or 1 (success)\n\tExample of usage:\n\t\tinitialiseDatabank(massdb1)\n\n\t\tmassdb1.setStringValue(\"test1\",\"dfg sdfg sdfg sdfgfdg \")\n\n--]]\n\nlocal  keypattern = \"[\"..[[%sABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890.%-%!%\"%]%[%^%*%+%_]]..\"]+\"\nlocal datapattern = \"[\"..[[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890.%-%!%\"%]%[%^%*%+%_%&%/]]..\"]+\"\n\nlocal fieldSep = \"#\"\nlocal dbMaxData=20000\n\nlocal function encode(text)\n    --return string.gsub(string.gsub(string.gsub(string.gsub((text or \"\"),\" \",\"^\"),\",\",\"*\"),\"%-\",\"&\"),[[%\"]],\"/\")\n    return string.gsub(string.gsub(string.gsub((text or \"\"),\" \",\"^\"),\",\",\"*\"),\"%-\",\"&\")\n\nend\n\nlocal function decode(text)\n    --return string.gsub(string.gsub(string.gsub(string.gsub((text or \"\"),\"%^\",\" \"),\"%*\",\",\"),\"%&\",\"-\"),\"%/\",[[\"]])\n    return string.gsub(string.gsub(string.gsub((text or \"\"),\"%^\",\" \"),\"%*\",\",\"),\"%&\",\"-\")\n\nend\n\nlocal function clearDB(slot)\n\tif slot == nil then system.print(\"slot is nil\") return 0 end\n\tif type(slot)==\"table\" then uid = slot.getId() else system.print(\"slot is not valid\") return 0 end\n\tslot.setTags(\"\")\n\treturn 1\nend\n\nlocal function getDBValue(slot,key)\n    local res=\"\"\n\tif slot == nil then system.print(\"slot is nil\") return \"\" end\n\tif type(slot)==\"table\" then uid = slot.getId() else system.print(\"slot is not valid\") return \"\" end\n\tif not(string.len(key) == string.len(string.match(key, \"(\"..keypattern..\")\", 1))) then system.print(\"invalid key value: \"..key) return \"\" end\n\tlocal tagData =slot.getTags()\n\tlocal kpattern = fieldSep..encode(key)..fieldSep\n\tlocal starti, endi, value = string.find(tagData,kpattern,1)\n\tif starti==nil then return \"\" end -- key not found\n\tlocal endv = string.find(tagData,\"#\",endi+1)\n\tif not(endv==nil) then\n\t\tres= decode(string.sub(tagData,endi+1, endv-1))\n\telse\n\t\tres= decode(string.sub(tagData,endi+1))\n\tend\n    --debugMsg(\"res:\"..res)\n    return res\nend\n\nlocal function setDBValue(slot, key, value)\n    -- verify slot, key and value\n    --debugMsg(\"key:\"..key..\" value:\"..value)\n\tif slot == nil then system.print(\"slot is nil\") return 0 end\n\tif type(slot)==\"table\" then uid = slot.getId() else system.print(\"slot is not valid\") return 0 end\n\tif key==nil or value==nil then system.print(\"nil key or value\") return 0 end\n\tif not(string.len(key) == string.len(string.match(key, \"(\"..keypattern..\")\", 1))) then system.print(\"invalid key value: \"..key) return 0 end\n\n\tlocal tagData =slot.getTags()\n\tlocal kpattern = fieldSep..encode(key)..fieldSep\n\tlocal starti, endi, valuei = string.find(tagData,kpattern,1)\n\tif starti==nil then -- key not found, append record to databank\n        --debugMsg(\"key not found\")\n\t\ttagData = tagData..fieldSep..encode(key)..fieldSep ..encode(value) ..fieldSep\n\telse\n        --debugMsg(\"key found\")\n\t\tlocal endv = string.find(tagData,fieldSep,endi+1)\n\t\t\tif not(endv==nil) then -- replace existing key value with new value\n            --debugMsg(\"replacing key value\")\n\t\t\t\ttagData = string.sub(tagData,1,endi)..encode(value)..string.sub(tagData,endv)\n\t\t\telse -- key is last in databank, append record to databank\n            --debugMsg(\"appending key value\")\n\t\t\t\ttagData = string.sub(tagData,1,endi)..encode(value)..fieldSep\n\t\t\tend\n\tend\n\tif string.len(tagData) > dbMaxData then\n        system.print(\"databank if full, write failed\")\n        return 0\n    else\n        --debugMsg(\"tagData:\"..tagData)\n\t\tslot.setTags(tagData)\n        return 1\n    end\nend\n\nlocal function getDBNbKeys(slot)\n    -- verify slot\n\tif slot == nil then system.print(\"slot is nil\") return 0 end\n\tif type(slot)==\"table\" then uid = slot.getId() else system.print(\"slot is not valid\") return 0 end\n\tlocal tagData =slot.getTags()\n\tlocal kpattern = fieldSep..keypattern..fieldSep..keypattern..fieldSep\n\tlocal starti, endi = string.find(tagData,kpattern,1)\n\ti=0\n\twhile not(starti==nil) do\n\t\ti=i+1\n\t\tstarti, endi = string.find(tagData,kpattern,starti+1)\n\tend\n\treturn i\nend\n\nlocal function getDBKeys(slot)\n    -- verify slot\n\tif slot == nil then system.print(\"slot is nil\") return nil end\n\tif type(slot)==\"table\" then uid = slot.getId() else system.print(\"slot is not valid\") return nil end\n\tlocal tagData =slot.getTags()\n\tlocal kpattern = fieldSep..\"(\"..datapattern..\")\"..fieldSep..datapattern..fieldSep\n\tlocal starti, endi, valuei = string.find(tagData,kpattern,1)\n\tlocal keys={}\n\ti=0\n\twhile not(starti==nil) do\n\t\ti=i+1\n\t\tkeys[i]=decode(valuei)\n\t\tstarti, endi, valuei = string.find(tagData,kpattern,starti+1)\n\tend\n\treturn keys\nend\n\nlocal function hasDBKey(slot,key)\n\tif slot == nil then system.print(\"slot is nil\") return 0 end\n\tif type(slot)==\"table\" then uid = slot.getId() else system.print(\"slot is not valid\") return 0 end\n\tif not(string.len(key) == string.len(string.match(key, \"(\"..keypattern..\")\", 1))) then system.print(\"invalid key value: \"..key) return 0 end\n\tlocal tagData =slot.getTags()\n\tlocal kpattern = fieldSep..encode(key)..fieldSep\n\tlocal starti, endi = string.find(tagData,kpattern,1)\n\tif starti==nil then return 0\n\telse return 1\n\tend\nend\n\nfunction initialiseDatabank(slot)\n    if not(slot.getStringValue == nil) then -- existing databank so no initialisation needed\n        return 1\n    elseif not(slot.getTags == nil) then -- this is a tagged item so we can use it\n        slot.setStringValue = (function(a,b) return setDBValue(slot,a,b) end)\n        slot.getStringValue = (function(a) return getDBValue(slot,a) end)\n        slot.setFloatValue = (function(a,b) return setDBValue(slot,a,b) end)\n        slot.getFloatValue = (function(a) return tonumber(getDBValue(slot,a)) end)\n        slot.setIntValue = (function(a,b) return setDBValue(slot,a,b) end)\n        slot.getIntValue = (function(a) \n                \t\t\tlocal temp=getDBValue(slot,a)\n                \t\t\tif temp==nil or tonumber(temp)==nil then return 0\n                    \t\t else return math.floor(tonumber(temp))\n                    \t\t end\n                \t\t end)\n        slot.clear = (function() return clearDB(slot) end)\n\t\tslot.hasKey = (function(a) return hasDBKey(slot, a) end)\n\t\tslot.getKeys = (function() return getDBKeys(slot) end)\n\t\tslot.getNbKeys = (function() return getDBNbKeys(slot) end)\n\t\treturn 1\n    else\n        return 0\n    end\nend\n    \n--[[ Library for linking slots... tags\n     Provides the functions:\n\t\tlinkPBSlots(debug) \t\t\t- where debug is either true or false\n\t\t\t\t\t\t\t\t\t- no return value\n\t\t\t\t\t\t\t\t\t\n\tExample of usage:\n\t\t\tslot={}\n\t\t\tslot[\"core\"] = {name=nil, tp=\"core\", link=nil,optional=true, uid=nil}\n\t\t\tslot[\"massdb1\"] = {name=\"mydb\", tp=\"databank\", link=nil,optional=false, uid=nil}\n\t\t\tslot[\"massdb2\"] = {name=nil, tp=\"databank\", link=nil,optional=true, uid=nil}\n\t\t\tslot[\"screen1\"] = {name=\"screen1\", tp=\"screen\", link=nil,optional=false, uid=nil}\n\n\t\t\tlinkPBSlots(true)\n\n\t\t\tmassdb1 = slot.massdb1.link\n\t\t\tmassdb2 = slot.massdb2.link\n\t\t\tscreen1 = slot.screen1.link\n--]]\n\nlocal core={}\nlocal function getCore()  \n    for k,v in pairs(unit) do\n   \t if type(v)==\"table\" and not(v.getElementClass == nil) and string.lower(string.sub(v.getElementClass(),1,4)) ==\"core\" then\n            slot[\"core\"].name = v.getElementNameById(v.getId())\n            slot[\"core\"].tp = v.getElementClass()\n            slot[\"core\"].link = v\n            return v\n  \t  end\n    end\n    return nil\nend\n\nlocal function isDatabank(slotType)\n    --system.print(slotType)\n    if slotType == \"data\" or\n       slotType == \"adju\" then\n        return true\n    else\n        return false\n    end\nend\n\nlocal function linkSlots()\n    local i = 0\n    for k,v in pairs(unit) do\n    \tif type(v)==\"table\" and not(v.getId == nil) and not(v.getElementClass == nil) then\n             local eName = nil\n             if not(core == nil) then \n                 eName = core.getElementNameById(v.getId()) \n             else\n                 local pattern=[[\"name\":\"([%w%s%-%[%]^\"]+)\"]]\n                 eName=string.match(v.getData(),pattern,1)\n             end\n   \t\t   local eType = string.sub(string.lower(v.getElementClass()),1,4)\n             local eId = v.getId()\n             --debugMsg(v.getElementClass())\n             if eId==nil then system.print(\"Unknown device Id:\"..eId..\" ...exiting\") Exit() return end\n             local foundSlot = false\n             for j, w in pairs(slot) do\n    \t\t  if (slot[j].name==nil or eName == slot[j].name) then\n                    if (w.tp == \"databank\" and isDatabank(eType)) or\n                        eType == string.sub(w.tp,1,4) then\n                        if (not(slot[j].uid==nil) and slot[j].uid==eId) or slot[j].uid==nil then\n                           slot[j].tp = v.getElementClass()\n                           slot[j].link = v\n                           slot[j].uid = eId\n                           slot[j].slot=k\n                           if not(eName==nil) then slot[j].name = eName end\n                           i=i+1\n                           foundSlot = true\n                           break\n                        end    \n                    end\n                end\n             end\n             if not(foundSlot) and not(eId==nil) and not(eId==self.getId()) then system.print(\"Linked device \"..eId..\"(\"..v.getElementClass()..\") not in list\") end\n         end\n     end\n     return i\nend\n\nlocal function showLinks()\n    for k,v in pairs(slot) do\n        local linked = \"linked\"\n        if v.link==nil then linked = \"unlinked\" end\n        if v.uid==nil then\n\t\t  system.print(\"Slot: \"..k..\" Type: \"..v.tp..\" is \"..linked)\n\t   elseif v.name==nil then\n\t\t  system.print(\"Slot: \"..k..\" Type: \"..v.tp..\" is \"..linked..\" to slot \"..v.uid)\n        else\n\t\t  system.print(\"Slot: \"..k..\" Type: \"..v.tp..\" is \"..linked..\" to slot \"..v.uid..\" [\"..v.name..\"]\")                \n        end\n    end\nend\n\nlocal function countSlots()\n\tlocal i=0\n\tfor k,v in pairs(slot) do\n\t\ti=i+1\n\tend\n     --if not(slot[\"core\"]==nil) and slot[\"core\"].link==nil and slot[\"core\"].otional\n\treturn i -- exclude the core\nend\n\nfunction linkPBSlots(debug)\n    core=getCore()\n    local linkedSlots = linkSlots()\n    if debug then showLinks() end\n    local totalSlots = countSlots()\n    if linkedSlots < totalSlots then \n        local criticalError = false\n        for k,v in pairs(slot) do\n            if v.link == nil and not(v.optional) then system.print(\"Missing link to \"..k) criticalError = true end\n        end\n        if criticalError then\n            system.print(\"Missing links found... exiting\")\n            unit.exit()\n        end\n    end\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"4"},{"code":"function loadLocationTable ()\n\nlocationTable = {{}}\nlocationTable[1]                = {\"Alioth Market 1\", \"::pos{0,2,30.3314,101.3106,122.9764}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 2\", \"::pos{0,2,24.4469,88.0409,238.3019}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 3\", \"::pos{0,2,34.9734,87.3012,176.2188}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 4\", \"::pos{0,2,28.3352,99.5187,165.9078}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 5\", \"::pos{0,2,33.3939,87.3299,277.1366}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 6\", \"::pos{0,2,36.0044,101.3503,220.0897}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 7\", \"::pos{0,2,22.5024,98.1449,232.5154}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 8\", \"::pos{0,2,21.2154,93.9616,251.0768}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 9\", \"::pos{0,2,28.7133,85.6389,260.7636}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 10\", \"::pos{0,2,35.9865,91.8393,190.1616}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 11\", \"::pos{0,2,-1.0735,178.5062,69.9428}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 12\", \"::pos{0,2,22.7112,-92.3078,166.8481}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 13\", \"::pos{0,2,-23.3768,-10.5455,178.8458}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 14\", \"::pos{0,2,-73.4716,101.3697,89.5661}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 15\", \"::pos{0,2,61.7831,27.8517,54.9186}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 16\", \"::pos{0,2,23.4406,114.4179,211.1991}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 17\", \"::pos{0,2,37.8637,64.1825,151.5507}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 18\", \"::pos{0,2,49.9360,-170.7565,62.1982}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 19\", \"::pos{0,2,-32.7357,76.3764,209.0805}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 20\", \"::pos{0,2,-35.1535,-95.1230,301.0724}\", \"m\"}   \n    \nlocationTable[#locationTable+1] = {\"Madis Market 1\", \"::pos{0,1,2.6476,176.8761,813.0974}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Madis Market 2\", \"::pos{0,1,10.3552,8.5146,816.2210}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Madis Market 3\", \"::pos{0,1,-0.2107,82.0779,809.5571}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Madis Market 4\", \"::pos{0,1,-80.6046,44.9385,822.6188}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Madis Market 5\", \"::pos{0,1,81.0827,5.3022,823.1976}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Madis Market 6\", \"::pos{0,1,13.9814,-91.6163,811.0679}\", \"m\"}\n\nlocationTable[#locationTable+1] = {\"Thades M1: Market\", \"::pos{0,30,-2.9797,-117.7645,203.7519}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Feli: Market\", \"::pos{0,5,0.9348,178.6658,18417.2812}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Feli: Market 3\", \"::pos{0,5,-0.7500,-17.3248,18473.4238}\", \"m\"}\n\nlocationTable[#locationTable+1] = {\"Symeon Market 1\", \"::pos{0,110,3.1400,-174.0223,267.1084}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 2\", \"::pos{0,110,-0.9862,88.3038,197.0626}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 3\", \"::pos{0,110,18.1117,11.1108,180.8022}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 4\", \"::pos{0,110,-26.9701,103.3741,186.2557}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 5\", \"::pos{0,110,83.1653,108.7807,142.5796}\", \"m\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 6\", \"::pos{0,110,-79.3167,95.3975,138.5268}\", \"m\"}\n\nlocationTable[#locationTable+1] = {\"IC Outpost Sicari\", \"::pos{0,6,-65.3124,173.4122,158.8785}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Outpost Sinnen\", \"::pos{0,7,37.2404,-141.5656,249.6978}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Outpost Ion\", \"::pos{0,120,32.2098,58.4779,-0.0001}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Outpost Jago\", \"::pos{0,9,78.1733,-104.7361,33.4704}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Outpost Lacobus\", \"::pos{0,100,18.8089,-93.9829,687.3893}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Outpost Symeon\", \"::pos{0,110,47.1691,89.9866,-0.0000}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Outpost Feli\", \"::pos{0,5,24.8034,21.1221,18333.6016}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Alioth City\", \"::pos{0,2,7.9647,79.6553,69.3043}\", \"f\"}\nlocationTable[#locationTable+1] = {\"IC Space Station\", \"::pos{0,0,-763958.1082,410933.9352,-219455.3712}\", \"f\"}\nend\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"5"},{"code":"screen.setCenteredText(\"Standby Mode\")","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"6"},{"code":"--[[\n\tSatNav version 3_0_2\n\tCreated By TrogLaByte\n\n\tDiscord: Trog#5105\n\tInGame: TrogLaByte\n\t\n\tGNU Public License 3.0. Use whatever you want, be so kind to leave credit.\n]] \n--Pilot1Switch.activate()\n--Pilot2Switch.deactivate()\nfunction initiateRequiredLibaries()\n\tvec3  = require('cpml.vec3')\n\tutils = require('cpml.utils')\n\tplanetRef = require('cpml.planetref')\n\treferenceTableSource = require('cpml.atlas')\nend\n\n\tif pcall(initiateRequiredLibaries) then\n\t\tsystem.print(\"Libaries loaded successfully\")\n\telse\n            system.print(\"Libaries failed to load: check that the following libraries exist:\")\n            system.print(\"(<ProgrmData> is the directory in to which you installed DU)\")\n            --system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/dkjson\")\n            system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/vec3\")\n            system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/utils\")\n            system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/planetref\")\n            system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/atlas\")\n            system.print(\"\")\n            system.print(\"planetref.lua and atlas.lua can be obtained from the following GitLab url:\")\n            system.print(\"https://gitlab.com/JayleBreak/dualuniverse/-/tree/master/DUflightfiles/autoconf/custom\")\n            unit.exit()\n\tend\n\n-----------------------------------------------\n-- Global Variables\n-----------------------------------------------\n\nlocal version = \"3_1_0\" \n\nlocal defaultNewLocName = \"SatNav Location\" --export: default name used for new locations\nlocal PlanetPanelColour = \"99eeff\" --export: Hex code for colour of planet panel and buttons (you need to include the quotes)\nlocal LocPanelColour = \"aa99ff\" --export: Hex code for colour of locations panel and buttons (you need to include the quotes)\nlocal FontPanelColour = \"000000\" --export: Hex code for font colour of planet/locations panel (you need to include the quotes)\nlocal LineHighlightColour = \"ccffff\"--export: Hex code for colour of highlighted lines in planet/location panel (you need to include the quotes)\n\nlocal BackgroundColor = \"#1e1e1e\"\nlocal PlanetBackgroundColor = \"#\"  .. PlanetPanelColour\nlocal LocationBackgroundColor = \"#\"  .. LocPanelColour\nlocal MainFontColor = \"#\"  .. FontPanelColour\nlocal HighlightColor = \"#\"  .. LineHighlightColour\nlocal planetIconColour = \"grey\" --export: default colour of planet icons\nlocal marketIconColour = \"green\" --export: default colout of market icons\nlocal mineIconColour = \"red\" --export: default colout of mine site icons\nlocal crashIconColour = \"blue\" --export: default colout of crash site icons\nlocal baseIconColour = \"purple\" --export: default colout of bases icons\nlocal favouriteIconColour = \"yellow\" --export: default colout of favourite icons\nlocal buttonColour = \"lightsteelblue\" --export: default colout of favourite icons\nlocal lastPlanetSelected = \"Alioth\" --export: The default start planet for displaying locations\n\nlocal pngMarketIcon = [[xlink:href=\"assets.prod.novaquark.com/67573/2bf5f13f-6386-428e-9ad2-2a8427eb6449.png\"]]\nlocal pngMineIcon = [[xlink:href=\"assets.prod.novaquark.com/67573/ba7458cf-640a-4fa5-83e8-c77ad544d85c.png\"]]\nlocal pngCrashIcon = [[xlink:href=\"assets.prod.novaquark.com/67573/bb0ae118-31e5-4479-88b3-045dbe83ef8b.png\"]]\nlocal pngBaseIcon = [[xlink:href=\"assets.prod.novaquark.com/67573/b764cc8e-1f30-45e3-88b5-69ace7257637.png\"]]\nlocal pngPlanetIcon = [[xlink:href=\"assets.prod.novaquark.com/67573/13e46ea4-a890-4b67-b6f1-4653ae45e4fc.png\"]]\nlocal pngFavouriteIcon = [[xlink:href=\"assets.prod.novaquark.com/67573/e6062816-b024-4a42-a22d-90019f5d9e26.png\"]]\n\nlocal clickAreas = {}\nlocal locList={}\npageLines=12\ndisplayPlanetList={}\ndisplayLocationList={}\nCurrentLocationPage = 1\nCurrentPlanetPage = 1\ncurrentFilter = \"PlanetFilter\"\nsortOrder = \"az\"\nmyDatabank={}\ndbHud={}\nisPlanet = \"\"\nlocal SatNavDBLocs = \"SatNavLocs\"\n\nslot={}\nslot[\"core\"] = {name=nil, tp=\"core\", link=nil,optional=false, uid=nil}\nslot[\"satnavdb1\"] = {name=\"satnavdb\", tp=\"databank\", link=nil,optional=false, uid=nil}\nslot[\"satnavdb2\"] = {name=\"satnavdb2\", tp=\"databank\", link=nil,optional=true, uid=nil}\n--slot[\"satnavdb3\"] = {name=\"satnavdb3\", tp=\"databank\", link=nil,optional=true, uid=nil}\n--slot[\"satnavdb4\"] = {name=\"satnavdb4\", tp=\"databank\", link=nil,optional=true, uid=nil}\nslot[\"dimhuddb\"] = {name=\"dimHud_1\", tp=\"databank\", link=nil,optional=true, uid=nil}\nslot[\"backupdb\"] = {name=\"backupdb\", tp=\"databank\", link=nil,optional=true, uid=nil}\nslot[\"screen1\"] = {name=\"screen1\", tp=\"screen\", link=nil,optional=false, uid=nil}\n\nlinkPBSlots(true)\n\nmyDatabank = slot.satnavdb1.link\nsatnavdb2 = slot.satnavdb2.link\ndbHud = slot.dimhuddb.link\ndupSatnavDB = slot.backupdb.link\nscreen = slot.screen1.link\n\nif myDatabank==nil then system.print(\"SatNav databank not found... application will stop\") unit.exit() \n\telse initialiseDatabank(myDatabank)\n\t\tif not(satnavdb2==nil) then initialiseDatabank(satnavdb2) end\n\tend\nif dbHud==nil then system.print(\"No Dimencia Hud Identified - will run in Stand Alone mode\")\n    else initialiseDatabank(dbHud)\n    \t HUD = \"Dimencia\"\n\t\tsystem.print(\"Dimencia Hud Identified\")\n    end\nif backupdb==nil then system.print(\"No SatNav backup databank identified\")\n    else initialiseDatabank(dupSatnavDB)\n\t\tsystem.print(\"SatNav ackup databank available\")\n    end\n\n-----------------------------------------------\n-- set up galaxy data and functions for planets and locations\n-----------------------------------------------\n\ngalaxyReference = planetRef(referenceTableSource)\nhelios = galaxyReference[0] -- PlanetaryReference.PlanetarySystem instance\nplanetList={}\nplanetDistList={}\nlocDistList={}\nlocTagList={}\n\nfunction getBodyId(planetName)\n\tfor i=1,200 do\n\t\tif helios[tonumber(i)] ~= nil then\n\t\t\tif string.lower(helios[tonumber(i)].name) ==string.lower(planetName) then\n\t\t\t\treturn i\n\t\t\tend\n\t\tend\n\tend\n\treturn 0\nend\n\nfunction buildPlanetList()\n\tlocal planet={}\n\tlocal currentLoc = vec3(core.getConstructWorldPos())\n\tlocal shipMass = core.getConstructMass()\n    local tempPlanetList = {}\n    local tempPlanetDist = {}\n\tfor i=1,200 do\n\t\tif helios[tonumber(i)] ~= nil then\n\t\t\tplanet = helios[tonumber(i)]\n\t\t\ttempPlanetList[#tempPlanetList+1] = planet.name\n\t\t\tlocal planetDistance = planet:getDistance(currentLoc)\n               tempPlanetDist[planet.name] = tonumber(planetDistance)\n\t\t\tplanetDistList[planet.name] = formatDistance(planetDistance) .. \n\t\t\t\tstring.format(\" [%.0f wc]\", ((planetDistance/200000)*(shipMass/1000)/4000))\n\t\tend\n\tend\n\ttempPlanetList[#tempPlanetList+1]=\"Space\"\n\ttempPlanetDist[\"Space\"] = 0\n\tplanetDistList[\"Space\"] = 0\n\ttable.sort(tempPlanetList)\n\tif sortOrder == \"km\" then\n\t\tlocal sortedKeys = getKeysSortedByValue(tempPlanetList, function(a, b) \n\t\t\t\tif not(a==nil) and not(b==nil) and \n\t\t\t\t\ttonumber(tempPlanetDist[a]) and tonumber(tempPlanetDist[b]) then \n\t\t\t\t\treturn tonumber(tempPlanetDist[a]) < tonumber(tempPlanetDist[b])\n\t\t\t\telse return false\n\t\t\t\tend\n\t\t\t end)\n\t\t\n\t\tfor i=1,#sortedKeys do\n\t\t\tplanetList[i] = tempPlanetList[sortedKeys[i]]\n\t\tend\n\telse\n\t\tfor i=1,#tempPlanetList do\n\t\t\tplanetList[i] = tempPlanetList[i]\n\t\tend\n\tend\nend\n\nfunction formatDistance(distance)\n\tif distance < 200000 then\n\t\treturn string.format(\"%.0f km\",distance/1000)\n\telseif distance < 4000000 then\n\t\treturn string.format(\"%.2f su\",distance/200000)\n\telse\n\t\treturn string.format(\"%.0f su\",distance/200000)\n\tend\nend\n\nfunction extractSatNavValues()\n\tlocal savedLocation1 = myDatabank.getStringValue(SatNavDBLocs)\n\tlocal savedLocation2 = \"\"\n     if not(satnavdb2 ==nil) then\n        savedLocation2=satnavdb2.getStringValue(SatNavDBLocs)\n     end\n\tlocal savedLocation = savedLocation1..savedLocation2\n\n\tlocal atmosphere     = extractAllNumberJsonValues(savedLocation,\"at\")\n\tlocal gravity   = extractAllNumberJsonValues(savedLocation,\"gr\")\n\tlocal planetname = extractAllStringJsonValues(savedLocation,\"pl\")\n\tlocal posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n\tlocal posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n\tlocal posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n\tlocal name\t   = extractAllStringJsonValues(savedLocation,\"na\")\n\tlocal tags       = extractAllStringJsonValues(savedLocation,\"ta\")\n \n\treturn atmosphere, gravity, planetname, posX, posY, posZ, name, tags\nend\n\nfunction dbUpdate()\n\tif myDatabank.hasKey(\"SavedLocations\") then\n\t\tlocal savedLocation = myDatabank.getStringValue(\"SavedLocations\")\n\t\tif #savedLocation > 5 then \n\t\t\tsystem.print(\"Converting SatNav DB to version 3\")\n\t\t\tlocal atmosphere     = extractAllNumberJsonValues(savedLocation,\"atmosphere\")\n\t\t\tlocal gravity   = extractAllNumberJsonValues(savedLocation,\"gravity\")\n\t\t\tlocal planetname = extractAllStringJsonValues(savedLocation,\"planetname\")\n\t\t\tlocal posX\t   = extractAllNumberJsonValues(savedLocation,\"x\")\n\t\t\tlocal posY\t   = extractAllNumberJsonValues(savedLocation,\"y\")\n\t\t\tlocal posZ\t   = extractAllNumberJsonValues(savedLocation,\"z\")\n\t\t\tlocal name\t   = extractAllStringJsonValues(savedLocation,\"name\")\n\t\t\tlocal tags       = extractAllStringJsonValues(savedLocation,\"tag\")\n\t\t\tsaveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ, tags)\n\t\t\tmyDatabank.setStringValue(\"SavedLocations\",\"\")\n\t\tend\n\tend\nend\n\nfunction buildPlanetLocList(planetName)\n\tlocal atmosphere, gravity, planetname, posX, posY, posZ, name, tags     = extractSatNavValues()\n   \n\tlocal currentLoc = vec3(core.getConstructWorldPos())\n\tlocal shipMass = core.getConstructMass()\n\tlocal planet={}\n\tlocList={}\n\ttempLocList = {}\n\ttempLocDist = {}\n\t\n\tif planetName ~= \"Space\" and currentFilter == \"PlanetFilter\" then\n\t\ttable.insert(tempLocList, planetName)  -- add planet name into the list as a default\n\t\tisPlanet = planetName\n\t\tlocDistList[planetName] = planetDistList[planetName]\n\telse isPlanet = \"\"\n\tend\n\tif #name > 0 then \n\t\tfor i=1,#name do\n\t\t\tif (currentFilter == \"MarketFilter\" and tags[i] and not(string.find(tags[i],\"m\")==nil)) or\n\t\t\t\t(currentFilter == \"MineFilter\" and tags[i] and not(string.find(tags[i],\"q\")==nil)) or\n\t\t\t\t(currentFilter == \"CrashFilter\" and tags[i] and not(string.find(tags[i],\"c\")==nil)) or\n\t\t\t\t(currentFilter == \"BaseFilter\" and tags[i] and not(string.find(tags[i],\"b\")==nil)) or\n\t\t\t\t(currentFilter == \"FavouriteFilter\" and tags[i] and not(string.find(tags[i],\"f\")==nil)) then\n\t\t\t\ttable.insert(tempLocList, name[i])\n\t\t\t\tlocal locDistance = (currentLoc - vec3(posX[i],posY[i],posZ[i])):len()\n\t\t\t\ttempLocDist[name[i]] = locDistance\n\t\t\t\tif planetName == \"Space\" then\n\t\t\t\t\tlocDistList[name[i]] = formatDistance(locDistance) ..\n\t\t\t\t\tstring.format(\" [%.0f wc]\", ((locDistance/200000)*(shipMass/1000)/4000))\n\t\t\t\telse\n\t\t\t\t\tlocDistList[name[i]] = formatDistance(locDistance)\n\t\t\t\tend\n\t\t\telseif currentFilter == \"PlanetFilter\" then\n\t\t\t\tif string.lower(planetname[i]) == string.lower(planetName) or\n\t\t\t\t   string.find(string.lower(planetname[i]),string.lower(planetName)) then\n\t\t\t\t\ttable.insert(tempLocList, name[i])\n\t\t\t\telseif planetname[i] == \"\" and planetName == \"Space\" then -- a space location\n\t\t\t\t\ttable.insert(tempLocList, name[i])\n\t\t\t\tend\n\t\t\t\tlocal locDistance = (currentLoc - vec3(posX[i],posY[i],posZ[i])):len()\n\t\t\t\ttempLocDist[name[i]] = locDistance\n\t\t\t\tif planetName == \"Space\" then\n\t\t\t\t\tlocDistList[name[i]] = formatDistance(locDistance) ..\n\t\t\t\t\tstring.format(\" [%.0f wc]\", ((locDistance/200000)*(shipMass/1000)/4000))\n\t\t\t\telse\n\t\t\t\t\tlocDistList[name[i]] = formatDistance(locDistance)\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #tags > 0 then\n\t\t\t\tlocTagList[name[i]]=tags[i]\n\t\t\telse\n\t\t\t\tlocTagList[name[i]]=\"\"\n\t\t\tend\n\t\t end\n\tend\n\ttable.sort(tempLocList)\n\n\tif sortOrder == \"km\" then\n\t\tlocal sortedKeys = getKeysSortedByValue(tempLocList, function(a, b) \n\t\t\t\tif not(a==nil) and not(b==nil) and tonumber(tempLocDist[a]) and tonumber(tempLocDist[b]) then \n\t\t\t\t\treturn tonumber(tempLocDist[a]) < tonumber(tempLocDist[b])\n\t\t\t\telse return false\n\t\t\t\tend\n\t\t\t end)\n\t\t\n\t\tfor i=1,#sortedKeys do\n\t\t\tlocList[i] = tempLocList[sortedKeys[i]]\n\t\tend\n\telse\n\t\tfor i=1,#tempLocList do\n\t\t\tlocList[i] = tempLocList[i]\n\t\tend\t\n\tend\nend\n\nfunction printLocMapPos(locationName)\n\tlocal wayPoint=\"\"\n\tlocal atmosphere, gravity, planetname, posX, posY, posZ, name, tags     = extractSatNavValues()\n\tlocal planet={}\n\tif #name > 0 then \n\t\tfor i = 1, #name do\n\t\t\t  if string.lower(name[i]) == string.lower(locationName) then\n\t\t\t\t\tlocal bodyId = getBodyId(planetname[i])\n\t\t\t\t\tplanet = helios[tonumber(bodyId)] \n\t\t\t\t\tif planet ~= nil then\n\t\t\t\t\t\tworldCoords = planet:convertToMapPosition(vec3(posX[i],posY[i],posZ[i]))\n\t\t\t\t\t\twayPoint=string.format([[::pos{%d,%d,%f,%f,%f}]],\n\t\t\t\t\t\t\tworldCoords.systemId,\n\t\t\t\t\t\t\tworldCoords.bodyId,\n\t\t\t\t\t\t\tworldCoords.latitude*constants.rad2deg,\n\t\t\t\t\t\t\tworldCoords.longitude*constants.rad2deg,\n\t\t\t\t\t\t\tworldCoords.altitude)\n\t\t\t\t\t\tsystem.print(name[i]..\" @ \"..wayPoint)\n\t\t\t\t\t\tsystem.setWaypoint(wayPoint)\n\t\t\t\t\t\treturn locationName,\n\t\t\t\t\t\t\tplanetname[i],\n\t\t\t\t\t\t\tatmosphere[i],\n\t\t\t\t\t\t\tgravity[i],\n\t\t\t\t\t\t\tposX[i],\n\t\t\t\t\t\t\tposY[i],\n\t\t\t\t\t\t\tposZ[i]\n\t\t\t\t\telse\n\t\t\t\t\t\twayPoint=string.format([[::pos{%d,%d,%f,%f,%f}]],\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tbodyId,\n\t\t\t\t\t\t\tposX[i],posY[i],posZ[i])\n\t\t\t\t\t\tsystem.print(name[i]..\" @ \"..wayPoint)\n\t\t\t\t\t\tsystem.setWaypoint(wayPoint)\n\t\t\t\t\t\treturn locationName,\n\t\t\t\t\t\t\tplanetname[i],\n\t\t\t\t\t\t\tatmosphere[i],\n\t\t\t\t\t\t\tgravity[i],\n\t\t\t\t\t\t\tposX[i],\n\t\t\t\t\t\t\tposY[i],\n\t\t\t\t\t\t\tposZ[i]\n\t\t\t\t\tend\n\t\t\t\t\tbreak\n\t\t\t  end   \n\t\t end\n\tend\n\treturn \"\"\nend\n\nfunction clearSavedLocations()\n\tmyDatabank.setStringValue(SatNavDBLocs,\"[]\")\n\tsystem.print(\"Satnav Databank cleared\")\nend\n\nfunction isDuplicateLocation(locName, locNameList)\n\tfor i=1,#locNameList do\n\t\tif locNameList[i] == locName then\n\t\t\treturn locName\n\t\tend\n\tend\n\treturn \"\"\nend\n\nfunction saveSavedLocations (name, planetname, atmosphere, gravity, posX, posY, posZ,tags)\n\tlocal newSavedLocations = \"[\"\n\tfor i = 1, #name do\n\t\tif tags[i] == nil then\n\t\t\ttags[i] = \"\"\n\t\tend\n\t\tif atmosphere[i] == nil or gravity[i] == nil or posX[i] == nil or posY[i] == nil or posZ[i] == nil then\n\t\t\t-- corrupt entry\n\t\telse\n\t\t\tif name[i]~=\"\" then\n\t\t\t\t  newSavedLocations = newSavedLocations..\n\t\t\t\t\t\t\t\t\"{\"..[[\"na\":\"]]..name[i]..\n\t\t\t\t\t\t\t\t\t [[\",\"pl\":\"]]..planetname[i]..[[\"]]..\n\t\t\t\t\t\t\t\t\t [[,\"at\":]]..(math.floor((atmosphere[i]*10))/10)..\n\t\t\t\t\t\t\t\t\t [[,\"gr\":]]..(math.floor((gravity[i]*10))/10)..\n\t\t\t\t\t\t\t\t\t [[,\"ta\":\"]]..tags[i]..[[\"]]..\n\t\t\t\t\t\t\t\t\t [[,\"po\":{\"x\":]]..math.floor(posX[i])..\n\t\t\t\t\t\t\t\t\t [[,\"y\":]]..math.floor(posY[i])..\n\t\t\t\t\t\t\t\t\t [[,\"z\":]]..math.floor(posZ[i])..\"}}\"\n\t\t\tend\n\t\t\tif i+1<#name then\n\t\t\t\tnewSavedLocations= newSavedLocations..\",\"\n\t\t\tend\n\t\tend\n\tend\n\tnewSavedLocations= newSavedLocations..\"]\"     \n\tif string.len(newSavedLocations) > 19000 and not(satnavdb2==nil) then\n\t\tlocal newSavedLocations1 = string.sub(newSavedLocations,1,19000)\n\t\tlocal newSavedLocations2 = string.sub(newSavedLocations,19001)\n\t\tmyDatabank.setStringValue(SatNavDBLocs,newSavedLocations1)\n\t\tsatnavdb2.setStringValue(SatNavDBLocs,newSavedLocations2)\n\telse\n\t\tmyDatabank.setStringValue(SatNavDBLocs,newSavedLocations)\n\tend\n\tsystem.print(\"Satnav Databank Updated [\"..string.len(newSavedLocations)..\" bytes]\")\nend\n\nfunction updateLocationName(newLocName, newLocPos)\n\tif isPlanet == lastLocationSelected then system.print(\"Cannot update dummy planet location entry\") return end\n\tlocal num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n\tlocal posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\n\t\t\t\t   num ..  ',' .. num .. '}'\n\tif newLocName ~= nil and newLocName ~= \"\" and \n\t   lastLocationSelected ~= nil and lastLocationSelected ~= \"\" then\n\t\tif newLocName ~= lastLocationSelected then\n\t\t\tsystem.print(\"Updating location: \"..lastLocationSelected)\n\t\tend\n\telse\n\t\tsystem.print(\"Invalid update request\")\n\t\treturn\n\tend\n\tif newLocName == lastLocationSelected and newLocPos == nil then\n\t\t-- this is a button change to the location pos\n\t\tnewLocPos = unit.system.getWaypointFromPlayerPos()\n\t\tworldPos = core.getConstructWorldPos()\n\t\tnewLocPosSys, newLocPosBdy, newLocPosX, newLocPosY, newLocPosZ \n\t\t\t  = string.match(newLocPos, posPattern, 1)\n\t\tlocal body = helios:closestBody(worldPos)\n\t\tnewlocAlt = ((vec3(worldPos)-vec3(body.center)):len())/(1000)\n\t\tnewLocPosSys = 0\n\t\tif newlocAlt < (((body.radius)/1000) + 200) then\n\t\t\tnewLocPosBdy = getBodyId(body.name)\n\t\telse\n\t\t\tnewLocPosBdy = 0\n\t\tend\n\t\tsystem.print(\"Updating pos for: '\"..newLocName..\n\t\t\t\t\t \"' to ::pos{\"..newLocPosSys..\",\"..newLocPosBdy..\",\"..newLocPosX ..\",\"..\n\t\t\t\t\t\t\t\t   newLocPosY..\",\"..newLocPosZ..\"}\")\n\telseif newLocPos ~= nil then\n\t\tnewLocPosSys, newLocPosBdy, newLocPosX, newLocPosY, newLocPosZ \n\t\t\t  = string.match(newLocPos, posPattern, 1)\n\t\tif newLocPosSys == nil then system.print(\"Invalid pos string: \"..newLocPos) return end\n\tend\n\n\tlocal oldLocFound = false\n\tlocal atmosphere, gravity, planetname, posX, posY, posZ, name, tags     = extractSatNavValues()\n\tfor i = 1, #name do\n\t\tif name[i] == lastLocationSelected then\n\t\t\t--system.print(\"Found: \"..lastLocationSelected)\n\t\t\tname[i] = newLocName\n\t\t\toldLocFound = true\n\t\t\tif newLocPosSys ~= nil then\n\t\t\t\tlocal planet = helios[tonumber(newLocPosBdy)]\n\t\t\t\tif tonumber(newLocPosBdy) > 0 then\n\t\t\t\t\tlocal planet = helios[tonumber(newLocPosBdy)]\n\t\t\t\t\tlocal worldCoords = planet:convertToWorldCoordinates(newLocPos)\n\t\t\t\t\tposX[i]=worldCoords[\"x\"]\n\t\t\t\t\tposY[i]=worldCoords[\"y\"]\n\t\t\t\t\tposZ[i]=worldCoords[\"z\"]\n\t\t\t\t\tplanetname[i]=planet.name\n\t\t\t\telse -- it is a space location\n\t\t\t\t\tposX[i]=newLocPosX\n\t\t\t\t\tposY[i]=newLocPosY\n\t\t\t\t\tposZ[i]=newLocPosZ\n\t\t\t\t\tgravity[i]=0\n\t\t\t\t\tatmosphere[i]=0\n\t\t\t\t\tplanetname[i]=\"Space\"\n\t\t\t\tend  \n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\tif oldLocFound then   \n\t\tsaveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ, tags)\n\telse\n\t\tsystem.print(\"Old Location Name Not Found\")\n\tend\nend\n\nfunction deleteLocationName(delLocName)\n\tif delLocName ~= nil and delLocName ~= \"\" and delLocName ~= isPlanet then\n\t\tsystem.print(\"Deleting location name: \"..delLocName)\n\telse\n\t\tsystem.print(\"Invalid update request\")\n\t\treturn\n\tend\n\tlocal oldLocFound = false\n\tlocal atmosphere, gravity, planetname, posX, posY, posZ, name, tags     = extractSatNavValues()\n\tfor i = 1, #name do\n\t\tif name[i] == delLocName then\n\t\t\t--system.print(\"Found: \"..delLocName)\n\t\t\tname[i] = \"\"\n\t\t\toldLocFound = true\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\tif oldLocFound then   \n\t\tsaveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ,tags)\n\telse\n\t\tsystem.print(\"Location Name Not Found\")\n\tend\nend\n\nfunction loadPointsOfInterest()\n\tlocal atmosphere, gravity, planetname, posX, posY, posZ, name, tags     = extractSatNavValues()\n\tlocal num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n\tlocal posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\n\t\t\t\t   num ..  ',' .. num .. '}'\n\tlocal j=0\n\tloadLocationTable()\n\t\n\tfor i = 1, #locationTable do\n\t\tlocal newRef = #name + 1\n\t\tif isDuplicateLocation(locationTable[i][1],name) == \"\" then\n\t\t\tname[newRef]=locationTable[i][1]\n\t\t\tlocal newLocPos = locationTable[i][2]\n\t\t\tlocal newTags = locationTable[i][3]\n\t\t\t--system.print(\"Name: \"..locationTable[i][1]..\" \"..newLocPos)\n\t\t\tlocal systemId, bodyId, latitude, longitude, altitude =\n\t\t\t\t\t\t\t\t\t\t\tstring.match(locationTable[i][2], posPattern)\n\t\t\t--system.print(\"BodyId: \".. bodyId)\n\t\t\tif tonumber(bodyId) > 0 then\n\t\t\t\tlocal planet = helios[tonumber(bodyId)]   \n\t\t\t\tlocal worldCoords = planet:convertToWorldCoordinates(newLocPos)\n\t\t\t\tposX[newRef]=math.floor(worldCoords[\"x\"])\n\t\t\t\tposY[newRef]=math.floor(worldCoords[\"y\"])\n\t\t\t\tposZ[newRef]=math.floor(worldCoords[\"z\"])\n\t\t\t\tgravity[newRef]=math.floor((planet.GM/((planet.radius+posZ[newRef])^2))*10)/10\n\t\t\t\tatmosphere[newRef]=math.floor(unit.getAtmosphereDensity()*10)/10\n\t\t\t\tplanetname[newRef]=planet.name\n\t\t\telse -- it is a space location\n\t\t\t\tposX[newRef]=math.floor(latitude)\n\t\t\t\tposY[newRef]=math.floor(longitude)\n\t\t\t\tposZ[newRef]=math.floor(altitude)\n\t\t\t\tgravity[newRef]=0\n\t\t\t\tatmosphere[newRef]=0\n\t\t\t\tplanetname[newRef]=\"Space\"\n\t\t\t\t\n\t\t\tend\n\t\t\tif not(newTags == nil) then\n\t\t\t    tags[newRef]= newTags\n\t\t\telse\n\t\t\t\ttags[newRef]=\"\"\n\t\t\tend\n\t\telse\n\t\t\tsystem.print(\"Duplicate entry for location ignored: \"..locationTable[i][1])\n\t\tend\n\tend\n\tsaveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ,tags)\n\t--system.print(\"Default SatNav locations loaded\")\nend\n\nfunction newLocation (xnewLocName, newLocPos)\n\tlocal location\n\tif xnewLocName and newLocPos then\n\t\tlocation = newLocPos\n\telse\n\t\tlocation = system.getWaypointFromPlayerPos()\n\tend\n\t  \n\tlocal newLocName\n\tif xnewLocName then\n\t\tnewLocName = xnewLocName\n\telse\n\t\tlocal newLocId = myDatabank.getIntValue(\"lastNewLoc\") + 1\n\t\tmyDatabank.setIntValue(\"lastNewLoc\",newLocId)\n\t\tnewLocName = defaultNewLocName..\"-\"..newLocId\n\tend\n\t\n\tlocal num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n\tlocal posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\n\t\t\t\t   num ..  ',' .. num .. '}'\n\t\n\tlocal atmosphere, gravity, planetname, posX, posY, posZ, name, tags     = extractSatNavValues()\n\tlocal systemId, bodyId, latitude, longitude, altitude =\n\t\t\t\t\t\t\t\t string.match(location, posPattern)\n\tlocal worldPos = core.getConstructWorldPos()\n\tlocal body = helios:closestBody(worldPos)\n\n\tnewlocAlt = ((vec3(worldPos)-vec3(body.center)):len())/(1000)\n\tif newlocAlt < (((body.radius)/1000) + 200) then\n\t\tlocal bodyId = getBodyId(body.name)\n\t\tlocal planet = helios[tonumber(bodyId)]          -- PlanetaryReference.BodyParameters instance\n\t\tlocal worldCoords = planet:convertToWorldCoordinates(location)\n\t\tnewRef = #name + 1\n\t\tname[newRef]=newLocName\n\t\tposX[newRef]=worldCoords[\"x\"]\n\t\tposY[newRef]=worldCoords[\"y\"]\n\t\tposZ[newRef]=worldCoords[\"z\"]\n\t\tgravity[newRef]=( math.floor((planet.GM/((planet.radius+posZ[newRef])^2))*10)/10 or 0 )\n\t\tatmosphere[newRef]=( unit.getAtmosphereDensity() or 0 )\n\t\tplanetname[newRef]=body.name\n\telse\n\t\tnewRef = #name + 1\n\t\tname[newRef]=newLocName\n\t\tposX[newRef]=latitude\n\t\tposY[newRef]=longitude\n\t\tposZ[newRef]=altitude\n\t\tgravity[newRef]=0\n\t\tatmosphere[newRef]=0\n\t\tplanetname[newRef]=\"Space\"\n\n\tend\n\ttags[newRef]=\"\"\n\tsaveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ,tags)\n\tsystem.print(\"New location: \"..newLocName..\" added to SatNav databank\")\n\tprintLocMapPos(newLocName)\nend\n\nfunction copySelectedToHud (locationName)\n\t\n\tlocal locName, locplanetname, locatmosphere, locgravity, locX, locY, locZ = \n\t\tprintLocMapPos(locationName)\n\tif HUD == \"Dimencia\" then\n\t\tlocal newSavedLocations = \"[\"\n\t\tif locplanetname ~= \"\" and locationName ~= isPlanet then\n\t\t\t\tnewSavedLocations = newSavedLocations..\n\t\t\t\t\t\t\t\"{\"..[[\"name\":\"]]..\"SatNav Location\"..\n\t\t\t\t\t\t\t\t [[\",\"planetname\":\"]]..locplanetname..[[\"]]..\n\t\t\t\t\t\t\t\t [[,\"atmosphere\":]]..locatmosphere..\n\t\t\t\t\t\t\t\t [[,\"gravity\":]]..locgravity..\n\t\t\t\t\t\t\t\t [[,\"position\":{\"x\":]]..locX..\n\t\t\t\t\t\t\t\t [[,\"y\":]]..locY..\n\t\t\t\t\t\t\t\t [[,\"z\":]]..locZ..[[}}]]\n\t\t\tdbHud.setStringValue(\"SPBAutopilotTargetName\",\"SatNav Location\")\n\t\telse\n\t\t\tdbHud.setStringValue(\"SPBAutopilotTargetName\",isPlanet)\n\t\tend\n\t\tnewSavedLocations= newSavedLocations..\"]\"        \n\t\tdbHud.setStringValue(\"SavedLocations\",newSavedLocations)\n\t\tdbHud.setStringValue(\"SPBAutopilotTargetName\",\"SatNav Location\")\n\tend\nend\n\nfunction clearHudLocations()\n\tif HUD == \"Dimencia\" then\n\t\tdbHud.setStringValue(\"SavedLocations\",\"[]\")\n\t\tdbHud.setStringValue(\"SPBAutopilotTargetName\",\"\")\n\t\tsystem.print(\"Dimencia HUD Saved Locations Cleared\")\n\tend\nend\n\nfunction backupSatnavDB()\n\tlocal satnavLocation = myDatabank.getStringValue(SatNavDBLocs)\n\tlocal lastNewLoc = myDatabank.getIntValue(\"lastNewLoc\")\n\tif dupSatnavDB then\n\t\tdupSatnavDB.clear()\n\t\tdupSatnavDB.setStringValue(SatNavDBLocs,satnavLocation)\n\t\tdupSatnavDB.setIntValue(\"lastNewLoc\",lastNewLoc)\n\t\tsystem.print(\"SatNav Databank Backup Successfully\")\n\telse\n\t\tsystem.print(\"No backup databank linked, backup aborted\")\n\tend\nend\n\nfunction restoreSatnavDB()\n\tif dupSatnavDB then\n\t\tlocal satnavLocation = dupSatnavDB.getStringValue(SatNavDBLocs)\n\t\tlocal lastNewLoc = dupSatnavDB.getIntValue(\"lastNewLoc\")\n\t\tif not(satnavLocation == nil) then\n\t\t\tlocal tempLocs=\"[\"..string.gsub(string.gsub(string.sub(satnavLocation,2,-1),\"%[\",[[\"]]),\"%]\",[[\"]])..\"]\"\n\t\t\tsystem.print(\"tempLocs:\"..tempLocs)\n\t\t\tmyDatabank.clear()\n\t\t\tmyDatabank.setStringValue(SatNavDBLocs,satnavLocation)\n\t\t\tmyDatabank.setIntValue(\"lastNewLoc\",lastNewLoc)\n\t\t\tsystem.print(\"SatNav Databank Restored Successfully\")\n\t\telse\n\t\t\tsystem.print(\"Databank does not contain backup, restore aborted\")\n\t\tend\n\telse\n\t\tsystem.print(\"No backup databank linked, restore aborted\")\n\tend\nend\n\nfunction toggleTag (locName, tag)\n\tif locName == isPlanet then system.print(\"Cannot add tag to dummy planet location entry\") return end\n\tif not(locName == nil) then\n\t\tlocal oldLocFound = false\n\t\tlocal atmosphere, gravity, planetname, posX, posY, posZ, name, tags     = extractSatNavValues()\n\t\tfor i = 1, #name do\n\t\t\tif name[i] == locName then\n\t\t\t\toldLocFound = true\n\t\t\t\tif tags[i] == nil then\n\t\t\t\t\ttags[i]=tag\n\t\t\t\telseif not(string.find(tags[i],tag)==nil) then\n\t\t\t\t\ttags[i] = string.gsub(tags[i],tag,\"\")\n\t\t\t\telseif string.len(tags[i])>3 then\n\t\t\t\t\tsystem.print(\"Maximum of 4 tags per location\")\n\t\t\t\telse\n\t\t\t\t\ttags[i]=tags[i]..tag\n\t\t\t\tend\n\t\t\t\tlocTagList[locName]=tags[i]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\n\t\tif oldLocFound then   \n\t\t\tsaveSavedLocations(name, planetname, atmosphere, gravity, posX, posY, posZ, tags)\n\t\tend\n\tend\nend\n\nbuildPlanetList()\nbuildPlanetLocList(lastPlanetSelected)\nlocal planetCount=#planetList\n\nfunction refreshDisplay()\n\tif displayPlanetList[1] ~= \"\" then\n\t\t\t\tlastPlanetSelected = displayPlanetList[1]\n\t\t\t\tlastLocationSelected = \"\"\n\t\t\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\t\t\tclearLocDispList()\n\t\t\t\tselected = \"\"\n\t\t\t\tCurrentLocationPage=1\n\t\t\t\tCurrentPlanetPage=1\n\tend\nend\n-----------------------------------------------\n-- Code for on screen buttons\n-----------------------------------------------\n\nfunction DrawSVG(output) screen.setSVG(output) end\n\nfunction AddClickArea(newEntry) table.insert(clickAreas, newEntry) end\n\nfunction RemoveFromClickAreas(candidate)\n\tfor k, v in pairs(clickAreas) do\n\t\tif v.id == candidate then\n\t\t\tclickAreas[k] = nil\n\t\t\tbreak\n\t\tend\n\tend\nend\n\nfunction UpdateClickArea(candidate, newEntry)\n\tfor k, v in pairs(clickAreas) do\n\t\tif v.id == candidate then\n\t\t\tclickAreas[k] = newEntry\n\t\t\tbreak\n\t\tend\n\tend\nend\n\nfunction DisableClickArea(candidate)\n\tfor k, v in pairs(clickAreas) do\n\t\tif v.id == candidate then\n\t\t\tUpdateClickArea(candidate, {\n\t\t\t\tid = candidate,\n\t\t\t\tx1 = -1,\n\t\t\t\tx2 = -1,\n\t\t\t\ty1 = -1,\n\t\t\t\ty2 = -1\n\t\t\t})\n\t\t\tbreak\n\t\tend\n\tend\nend\n\nfunction InitiateClickAreas()\n\tclickAreas = {}\n  \n\tAddClickArea({id = \"LoadSatNavLocations\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"LoadHudLocations\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"NewLocation\", x1 = 300, x2 = 700, y1 = 900, y2 = 1000})\n\tAddClickArea({id = \"UpdateLocation\", x1 = 800, x2 = 1200, y1 = 900, y2 = 1000})\n\tAddClickArea({id = \"DeleteLocation\", x1 = 1300, x2 = 1700, y1 = 900, y2 = 1000})\n\tAddClickArea({id = \"ClearHudLocations\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"PlanetPageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"PlanetPageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"PlanetScrollBar\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"LocationPageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"LocationPageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\tAddClickArea({id = \"LocationScrollBar\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\t\n\tAddClickArea({id = \"MarketTag\", x1 = 1400, x2 = 1460, y1 = 100, y2 = 160})\n\tAddClickArea({id = \"MineTag\", x1 = 1500, x2 = 1560, y1 = 100, y2 = 160})\n\tAddClickArea({id = \"CrashTag\", x1 = 1600, x2 = 1660, y1 = 100, y2 = 160})\n\tAddClickArea({id = \"BaseTag\", x1 = 1700, x2 = 1760, y1 = 100, y2 = 160})\n\tAddClickArea({id = \"FavouriteTag\", x1 = 1800, x2 = 1860, y1 = 100, y2 = 160})\n\t\n\tAddClickArea({id = \"PlanetFilter\", x1 = 720, x2 = 830, y1 = 150, y2 = 240})\n\tAddClickArea({id = \"MarketFilter\", x1 = 720, x2 = 830, y1 = 250, y2 = 340})\n\tAddClickArea({id = \"MineFilter\", x1 = 720, x2 = 830, y1 = 350, y2 = 440})\n\tAddClickArea({id = \"CrashFilter\", x1 = 720, x2 = 830, y1 = 450, y2 = 540})\n\tAddClickArea({id = \"BaseFilter\", x1 = 720, x2 = 830, y1 = 550, y2 = 640})\n\tAddClickArea({id = \"FavouriteFilter\", x1 = 720, x2 = 830, y1 = 650, y2 = 740})\n\t\n\tAddClickArea({id = \"SortOrder\", x1 = 720, x2 = 830, y1 = 800, y2 = 900})\n\t\n\tfor i = 1, pageLines do\n\t\tAddClickArea({id = string.format(\"PList%d\",i), x1 = 90, x2 = 600, y1 = (170 + i * 55), y2 = (225 + i * 55)})\n\t\tAddClickArea({id = string.format(\"LList%d\",i), x1 = 1090, x2 = 1500, y1 = (170 + i * 55), y2 = (225 + i * 55)})\n\tend\nend\n\nfunction FlushClickAreas() clickAreas = {} end\n\nfunction clearLocDispList()\n\tfor i=1,pageLines do\n\t\tdisplayLocationList[i] = \"\"\n\tend\nend\n\nfunction CheckClick(x, y, HitTarget)\n\n\t--system.print(\" x:\"..x..\" y:\"..y)\n\tHitTarget = HitTarget or \"\"\n\tif HitTarget == \"\" then\n\t\tfor k, v in pairs(clickAreas) do\n\t\t\tif v and x >= v.x1 and x <= v.x2 and y >= v.y1 and y <= v.y2 then\n\t\t\t\tHitTarget = v.id\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t\n\t--system.print(\"HitTarget: \"..HitTarget)\n \n\tif HitTarget == \"PlanetPageDown\" then\n\t\tCurrentPlanetPage = CurrentPlanetPage+1\n\telseif HitTarget == \"PlanetPageUp\" then\n\t\tCurrentPlanetPage = math.max(CurrentPlanetPage-1,0)\n\telseif HitTarget == \"PlanetScrollBar\" then\n        CurrentPlanetPage = math.max(math.ceil((y - 250)/planetpageBlockSize),1)\n\telseif HitTarget == \"LocationPageDown\" then\n\t\tCurrentLocationPage = CurrentLocationPage+1\n\telseif HitTarget == \"LocationPageUp\" then\n\t\tCurrentLocationPage = math.max(CurrentLocationPage-1,0)\n\telseif HitTarget == \"LocationScrollBar\" then\n        CurrentLocationPage = math.max(math.ceil((y - 250)/locpageBlockSize),1)\n\telseif HitTarget == \"MarketTag\" then\n\t\ttoggleTag(lastLocationSelected,\"m\")\n\telseif HitTarget == \"MineTag\" then\n\t\ttoggleTag(lastLocationSelected,\"q\")\n\telseif HitTarget == \"CrashTag\" then\n\t\ttoggleTag(lastLocationSelected,\"c\")\n\telseif HitTarget == \"BaseTag\" then\n\t\ttoggleTag(lastLocationSelected,\"b\")\n\telseif HitTarget == \"FavouriteTag\" then\n\t\ttoggleTag(lastLocationSelected,\"f\")\n\telseif HitTarget == \"PlanetFilter\" then\n\t\tcurrentFilter = \"PlanetFilter\"\n\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\tmyDatabank.setStringValue(\"currentFilter\",currentFilter)\n\t\tCurrentLocationPage=1\n\telseif HitTarget == \"MarketFilter\" then\n\t\tcurrentFilter = \"MarketFilter\"\n\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\tmyDatabank.setStringValue(\"currentFilter\",currentFilter)\n\t\tCurrentLocationPage=1\n\telseif HitTarget == \"MineFilter\" then\n\t\tcurrentFilter = \"MineFilter\"\n\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\tmyDatabank.setStringValue(\"currentFilter\",currentFilter)\n\t\tCurrentLocationPage=1\n\telseif HitTarget == \"CrashFilter\" then\n\t\tcurrentFilter = \"CrashFilter\"\n\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\tmyDatabank.setStringValue(\"currentFilter\",currentFilter)\n\t\tCurrentLocationPage=1\n\telseif HitTarget == \"BaseFilter\" then\n\t\tcurrentFilter = \"BaseFilter\"\n\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\tmyDatabank.setStringValue(\"currentFilter\",currentFilter)\n\t\tCurrentLocationPage=1\n\telseif HitTarget == \"FavouriteFilter\" then\n\t\tcurrentFilter = \"FavouriteFilter\"\n\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\tmyDatabank.setStringValue(\"currentFilter\",currentFilter)\n\t\tCurrentLocationPage=1\n\telseif HitTarget == \"LoadSatNavLocations\" then\n\t\tloadPointsOfInterest()\n\t\trefreshDisplay()\n\telseif HitTarget == \"LoadHudLocations\" then\n\t\tloadHudLocations()\n\t\trefreshDisplay()\n\telseif HitTarget == \"ClearSatNavLocations\" then\n\t\tsystem.print(\"ClearSavedLocations\")\n\t\tclearSavedLocations()\n\t\trefreshDisplay()\n\telseif HitTarget == \"ClearHudLocations\" then\n\t\tclearHudLocations()\n\telseif HitTarget == \"NewLocation\" then\n\t\tsystem.print(\"NewLocation\")\n\t\tnewLocation()\n\t\trefreshDisplay()\n\telseif HitTarget == \"UpdateLocation\" then\n\t\tsystem.print(\"UpdateLocation\")\n\t\tupdateLocationName(lastLocationSelected,nil)\n\t\trefreshDisplay()\n\telseif HitTarget == \"DeleteLocation\" then\n\t\tsystem.print(\"DeleteLocation\")\n\t\tdeleteLocationName(lastLocationSelected)\n\t\trefreshDisplay()\n\telseif HitTarget == \"SortOrder\" then\n\t\tif sortOrder==\"az\" then sortOrder = \"km\" else sortOrder=\"az\" end\n\t\tbuildPlanetList()\n\t\trefreshDisplay()\n\telse\n\t\t\tfor i = 1,pageLines do\n\t\t\t\tif HitTarget == string.format(\"PList%s\",i) then\n\t\t\t\t\tif displayPlanetList[i] ~= \"\" then\n\t\t\t\t\t\tlastPlanetSelected = displayPlanetList[i]\n\t\t\t\t\t\tcurrentFilter = \"PlanetFilter\"\n\t\t\t\t\t\tbuildPlanetLocList(lastPlanetSelected)\n\t\t\t\t\t\tclearLocDispList()\n\t\t\t\t\t\tselected = \"\"\n\t\t\t\t\t\tlastLocationSelected = \"\"\n\t\t\t\t\t\tCurrentLocationPage=1\n\t\t\t\t\t\tmyDatabank.setStringValue(\"lastPlanetSelected\",lastPlanetSelected)\n\t\t\t\t\t\tmyDatabank.setStringValue(\"currentFilter\",currentFilter)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif HitTarget == string.format(\"LList%s\",i) then\n\t\t\t\t\tif displayLocationList[i] ~= \"\" and displayLocationList[i] ~= isPlanet then\n\t\t\t\t\t\tselected = displayLocationList[i]\n\t\t\t\t\t\tif HUD == \"Dimencia\" then\n\t\t\t\t\t\t\tcopySelectedToHud(selected)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tprintLocMapPos(selected)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tlastLocationSelected = selected\n\t\t\t\t\t\tselected = \"\"\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\tend\n\tDrawPlanetList()\nend\n\n-----------------------------------------------\n-- Code for building screen content and displaying it\n-----------------------------------------------\n\nlocal svgBootstrap = [[<svg class=\"bootstrap\" viewBox=\"0 0 1920 1120\" width=\"1920\" \n\t\t\t\theight=\"1120\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n\t\t\t\t<defs><style>\n\t\t\t\t\t  .ftitle { font-size: 80px; text-anchor: start;fill: white; }\n\t\t\t\t\t  .ftitlew { font-size: 60px; text-anchor: start;fill: red; }\n\t\t\t\t\t  .ftitle2 { font-size: 60px; text-anchor: start;fill: #565656; }\n\t\t\t\t\t  .ftopmiddle { font-size: 40px; text-anchor: middle;}\n\t\t\t\t\t  .ftopend { font-size: 40px; text-anchor: end;}\n\t\t\t\t\t  .fcapstart { font-size: 30px; text-anchor: start; fill: white;}\n\t\t\t\t\t  .fcapstarthy { font-size: 30px; text-anchor: start; fill: yellow;}\n\t\t\t\t\t  .fcapstarthr { font-size: 30px; text-anchor: start; fill: red;}\n\t\t\t\t\t  .fcapmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n\t\t\t\t\t  .fcapend { font-size: 30px; text-anchor: end; fill: white;}\n\t\t\t\t\t  .fmstart { font-size: 25px; text-anchor: start; fill: white;}\n\t\t\t\t\t  .fmstartg { font-size: 30px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n\t\t\t\t\t  .fmstartp { font-size: 40px; text-anchor: start; fill:]]..PlanetBackgroundColor..[[;}\n\t\t\t\t\t  .fmstartl { font-size: 40px; text-anchor: start; fill:]]..LocationBackgroundColor..[[;}\n\t\t\t\t\t  .fmstarty { font-size: 40px; text-anchor: start; fill: #aaaa00;}\n\t\t\t\t\t  .fmstartb { font-size: 40px; text-anchor: end; fill: black;}\n\t\t\t\t\t  .fmstartr { font-size: 40px; text-anchor: end; fill: #ff0000;}\n\t\t\t\t\t  .fmmiddle { font-size: 30px; text-anchor: middle; fill: ]]..MainFontColor..[[;}\n\t\t\t\t\t  .fmmiddles { font-size: 20px; text-anchor: middle; fill: ]]..MainFontColor..[[;}\n\t\t\t\t\t  .fmmiddleb { font-size: 30px; text-anchor: middle; fill: ]]..MainFontColor..[[;}\n\t\t\t\t\t  .fmmiddler { font-size: 30px; text-anchor: middle; fill: red;}\n\t\t\t\t\t  .fmend { font-size: 25px; text-anchor: end; fill: ]]..MainFontColor..[[;}\n\t\t\t\t</style></defs>]]\n\nfunction DrawPlanetList()\n\n\tlocal screenOutput = \"\"\n\n\t\t-- Draw Header\n\tscreenOutput = screenOutput .. svgBootstrap\n\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<rect width=\"1920\" height=\"1120\" style=\"fill: #]]..BackgroundColor..[[\"/><g></g>]]\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<text x=\"90\" y=\"50\" class=\"fmstart\">(Version: ]]..version..[[)</text>]]\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<text x=\"800\" y=\"50\" class=\"ftitle\">Sat Nav</text>]]\n\tif HUD == \"Dimencia\" then\n\t\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<text x=\"1500\" y=\"50\" class=\"fmstart\">(Dimencia HUD enabled)</text>]]\n\telse \n\t\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<text x=\"1500\" y=\"50\" class=\"fmstart\">(Standalone mode enabled)</text>]]\n\tend\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<rect x=\"70\" y=\"150\" rx=\"10\" ry=\"10\" width=\"620\" height=\"]] ..\n\t\t\t\t\t   ((pageLines + 1) * 55) ..\n\t\t\t\t\t   [[\" style=\"fill:]].. PlanetBackgroundColor .. [[;stroke:#ffff00;stroke-width:3;\" />]]\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<rect x=\"80\" y=\"160\" rx=\"5\" ry=\"5\" width=\"600\" height=\"40\" style=\"fill:#33331a;\" />]]      \n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<text x=\"90\" y=\"191\" class=\"fcapstart\">Planets</text>]]\n\tscreenOutput = screenOutput .. [[<rect x=\"]]..(622)..[[\" y=\"250\" width=\"50\" height=\"]]..(((pageLines + 1) * 55)-150)..[[\" style=\"red;\" />]]   \t\t\t\t\t   \t\t\t\t   \n\t\n\tlocal i = 0\n\tfor j = 1 + (CurrentPlanetPage - 1) * pageLines, pageLines +\n\t\t\t\t(CurrentPlanetPage - 1) * pageLines, 1 do\n\t\ti = i + 1\n\t\tif j < #planetList and j>0 then\n\t\t\tlocal planetName = planetList[j]                          \n\t\t\tif lastPlanetSelected == planetList[j] then\n\t\t\t\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<rect x=\"70\" y=\"]]..(140 + i * 55) .. \n\t\t\t\t\t   [[\" width=\"550\" height=\"55\"]] ..\n\t\t\t\t\t   [[\" style=\"fill:]].. HighlightColor .. [[;\" />]]\n\t\t\tend\n\n\t\t\tscreenOutput = screenOutput .. [[<text x=\"90\" y=\"]] ..\n\t\t\t\t\t\t\t\t   (180 + i * 55) .. [[\" class=\"fmstartg\">]] .. planetName ..  \n\t\t\t\t\t\t\t\t\t[[</text>]]\n\t\t\tif planetName ~= \"Space\" then\n\t\t\tscreenOutput = screenOutput .. [[<text x=\"600\" y=\"]] ..\n\t\t\t\t\t\t\t\t   (180 + i * 55) .. [[\" class=\"fmend\">]] .. planetDistList[planetName] ..    \n\t\t\t\t\t\t\t\t   [[</text>]] \n\t\t\tend\n\t\t\tdisplayPlanetList[i]=planetList[j]\n\t\telse\n\t\t\tdisplayPlanetList[i]=\"\"\n\t\tend\n\tend\n    if #planetList > pageLines then\n        planetpageBlockSize = (((pageLines + 1) * 55)-160) / math.ceil(#planetList / pageLines)\n        scrollStart = math.floor((CurrentPlanetPage-1)*planetpageBlockSize)\n\n        screenOutput = screenOutput ..                       \n            [[<rect x=\"]]..(622-3)..[[\" y=\"]]..(250+scrollStart)..[[\" width=\"50\" height=\"]]..(planetpageBlockSize)..[[\" style=\"fill:]]..PlanetBackgroundColor..[[;\" />]]   \n        UpdateClickArea(\"PlanetScrollBar\", {\n                        id = \"PlanetScrollBar\",\n                        x1 = 622,\n                        x2 = 670,\n                        y1 = 280,\n                        y2 = ((pageLines + 1) * 55)+99,\n                        screen = \"screen1\"\n                    })\n        if CurrentPlanetPage < math.ceil(#planetList / pageLines) then\n                    screenOutput = screenOutput .. [[<svg x=\"]]..(622)..[[\" y=\"]]..(((pageLines + 1) * 55)+100)..[[\">\n                                <rect x=\"0\" y=\"0\" width=\"45\" height=\"50\" style=\"fill:]]..PlanetBackgroundColor..[[;\" />\n                                <svg x=\"0\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg></svg>]]\n            UpdateClickArea(\"PlanetPageDown\", {\n                        id = \"PlanetPageDown\",\n                        x1 = 622,\n                        x2 = 670,\n                        y1 = ((pageLines + 1) * 55)+100,\n                        y2 = ((pageLines + 1) * 55)+150,\n                        screen = \"PlanetPageDown\"\n                    })\n        else\n            DisableClickArea(\"PageDown\")\n        end\n\n        if #planetList > 1 and CurrentPlanetPage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"]]..(622)..[[\" y=\"200\">\n                                <rect x=\"0\" y=\"0\" width=\"45\" height=\"50\" style=\"fill:]]..PlanetBackgroundColor..[[;\" />\n                                <svg x=\"0\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg></svg>]]\n            UpdateClickArea(\"PlanetPageUp\", {\n                        id = \"PlanetPageUp\",\n                        x1 = 622,\n                        x2 = 670,\n                        y1 = 200,\n                        y2 = 270,\n                        screen = \"screen1\"\n                    })\n        else\n            DisableClickArea(\"PlanetPageUp\")\n        end\n    end\n\n\t-- Start of Location List\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<rect x=\"870\" y=\"150\" rx=\"10\" ry=\"10\" width=\"1020\" height=\"]] ..\n\t\t\t\t\t   ((pageLines + 1) * 55) ..\n\t\t\t\t\t   [[\" style=\"fill:]]..\n\t\t\t\t\t   LocationBackgroundColor..\n\t\t\t\t\t   [[;stroke:#ffff00;stroke-width:3;\" />]]\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<rect x=\"880\" y=\"160\" rx=\"5\" ry=\"5\" width=\"1000\" height=\"40\" style=\"fill:#33331a;\" />]]\n\tif currentFilter == \"PlanetFilter\" then\n\t\tlocHeaderText = lastPlanetSelected ..\" Locations\"\n\telse\n\t\tlocHeaderText = currentFilter..\" Locations\"\n\tend\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<text x=\"890\" y=\"191\" class=\"fcapstart\">]].. locHeaderText ..[[</text>]]\n\tscreenOutput = screenOutput .. [[<rect x=\"]]..(1835)..[[\" y=\"250\" width=\"50\" height=\"]]..(((pageLines + 1) * 55)-150)..[[\" style=\"red;\" />]]  \t\t   \n\tlocal i = 0\n\tfor j = 1 + (CurrentLocationPage - 1) * pageLines, pageLines +\n\t\t\t\t(CurrentLocationPage - 1) * pageLines, 1 do\n\t\t\n\t\ti = i + 1\n\t\tif j <= #locList and j>0 then\n\t\t\tif lastLocationSelected == locList[j] then\n\t\t\t\tscreenOutput = screenOutput ..\n\t\t\t\t\t   [[<rect x=\"880\" y=\"]]..(140 + i * 55) .. \n\t\t\t\t\t   [[\" width=\"950\" height=\"55\"]] ..\n\t\t\t\t\t   [[\" style=\"fill:]].. HighlightColor .. [[;\" />]]\n\t\t\tend\n\t\t\tscreenOutput = screenOutput .. [[<text x=\"1090\" y=\"]] ..\n\t\t\t\t\t\t\t\t   (180 + i * 55) .. [[\" class=\"fmstartg\">]] .. locList[j] ..  \n\t\t\t\t\t\t\t\t\t[[</text>]]\n\t\t\tdisplayLocationList[i]=locList[j]\n\t\t\tscreenOutput = screenOutput .. [[<text x=\"1820\" y=\"]] ..\n\t\t\t\t\t\t\t\t   (180 + i * 55) .. [[\" class=\"fmend\">]] .. locDistList[locList[j]] ..    \n\t\t\t\t\t\t\t\t   [[</text>]] \n\t\t\tlocal tagIndent=884\n\t\t\tif not(locTagList[locList[j]]==nil) and not(string.find(locTagList[locList[j]],\"m\")==nil) then\n\t\t\t\tscreenOutput = screenOutput .. [[<svg x=\"]]..(tagIndent)..[[\" y=\"]]..(142 + i * 55) .. \n\t\t\t\t\t[[\"><rect width=\"50\" height=\"50\" style=\"fill:]]..marketIconColour..\n\t\t\t\t\t[[;\" /><image x=\"10\" y=\"10\" width=\"30\" height=\"30\" ]]..pngMarketIcon..[[/></svg>]]\n\t\t\t\ttagIndent=tagIndent+50\n\t\t\tend\n\t\t\tif not(locTagList[locList[j]]==nil) and not(string.find(locTagList[locList[j]],\"q\")==nil) then\n\t\t\t\tscreenOutput = screenOutput .. [[<svg x=\"]]..(tagIndent)..[[\" y=\"]]..(142 + i * 55) .. \n\t\t\t\t\t[[\"><rect width=\"50\" height=\"50\" style=\"fill:]]..mineIconColour..\n\t\t\t\t\t[[;\" /><image x=\"10\" y=\"10\" width=\"30\" height=\"30\" ]]..pngMineIcon..[[/></svg>]]\n\t\t\t\ttagIndent=tagIndent+50\n\t\t\tend\n\t\t\tif not(locTagList[locList[j]]==nil) and not(string.find(locTagList[locList[j]],\"c\")==nil) then\n\t\t\t\tscreenOutput = screenOutput .. [[<svg x=\"]]..(tagIndent)..[[\" y=\"]]..(142 + i * 55) .. \n\t\t\t\t\t[[\"><rect width=\"50\" height=\"50\" style=\"fill:]]..crashIconColour..\n\t\t\t\t\t[[;\" /><image x=\"10\" y=\"10\" width=\"30\" height=\"30\" ]]..pngCrashIcon..[[/></svg>]]\n\t\t\t\ttagIndent=tagIndent+50\n\t\t\tend\n\t\t\tif not(locTagList[locList[j]]==nil) and not(string.find(locTagList[locList[j]],\"b\")==nil) then\n\t\t\t\tscreenOutput = screenOutput .. [[<svg x=\"]]..(tagIndent)..[[\" y=\"]]..(142 + i * 55) .. \n\t\t\t\t\t[[\"><rect width=\"50\" height=\"50\" style=\"fill:]]..baseIconColour..\n                          [[;\" /><image x=\"10\" y=\"10\" width=\"30\" height=\"30\" ]]..pngBaseIcon..[[/></svg>]]\n\t\t\t\ttagIndent=tagIndent+50\n\t\t\tend\n\t\t\tif not(locTagList[locList[j]]==nil) and not(string.find(locTagList[locList[j]],\"f\")==nil) then\n\t\t\t\tscreenOutput = screenOutput .. [[<svg x=\"]]..(tagIndent)..[[\" y=\"]]..(142 + i * 55) .. \n\t\t\t\t\t[[\"><rect width=\"50\" height=\"50\" style=\"fill:]]..favouriteIconColour..\n                          [[;\" /><image x=\"10\" y=\"10\" width=\"30\" height=\"30\" ]]..pngFavouriteIcon..[[/></svg>]]\n\t\t\t\ttagIndent=tagIndent+50\n\t\t\tend\n\t\telse\n\t\t\tdisplayLocationList[i]=\"\"\n\t\tend\n\tend\n    if #locList > pageLines then\n        locpageBlockSize = (((pageLines + 1) * 55)-160) / math.ceil(#locList / pageLines)\n        scrollStart = math.floor((CurrentLocationPage-1)*locpageBlockSize)\n\n        screenOutput = screenOutput ..                       \n            [[<rect x=\"]]..(1835-3)..[[\" y=\"]]..(250+scrollStart)..[[\" width=\"50\" height=\"]]..(locpageBlockSize)..[[\" style=\"fill:]]..LocationBackgroundColor..[[;\" />]]   \n        UpdateClickArea(\"LocationScrollBar\", {\n                        id = \"LocationScrollBar\",\n                        x1 = 1835,\n                        x2 = 1895,\n                        y1 = 280,\n                        y2 = ((pageLines + 1) * 55)+99,\n                        screen = \"screen1\"\n                    })\n        if CurrentLocationPage < math.ceil(#locList / pageLines) then\n                    screenOutput = screenOutput .. [[<svg x=\"]]..(1835)..[[\" y=\"]]..(((pageLines + 1) * 55)+100)..[[\">\n                                <rect x=\"0\" y=\"0\" width=\"45\" height=\"50\" style=\"fill:]]..LocationBackgroundColor..[[;\" />\n                                <svg x=\"0\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg></svg>]]\n            UpdateClickArea(\"LocationPageDown\", {\n                        id = \"LocationPageDown\",\n                        x1 = 1835,\n                        x2 = 1895,\n                        y1 = ((pageLines + 1) * 55)+100,\n                        y2 = ((pageLines + 1) * 55)+150,\n                        screen = \"screen1\"\n                    })\n        else\n            DisableClickArea(\"LocationPageDown\")\n        end\n\n        if #locList > 1 and CurrentLocationPage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"]]..(1835)..[[\" y=\"200\">\n                                <rect x=\"0\" y=\"0\" width=\"45\" height=\"50\" style=\"fill:]]..LocationBackgroundColor..[[;\" />\n                                <svg x=\"0\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg></svg>]]\n            UpdateClickArea(\"LocationPageUp\", {\n                        id = \"LocationPageUp\",\n                        x1 = 1835,\n                        x2 = 1895,\n                        y1 = 200,\n                        y2 = 270,\n                        screen = \"screen1\"\n                    })\n        else\n            DisableClickArea(\"LocationPageUp\")\n        end\n    end\n   \n\tscreenOutput = screenOutput ..\n\t\t\t\t\t\t\t   [[<rect x=\"300\" y=\"900\" rx=\"10\" ry=\"10\" width=\"400\" height=\"60\" style=\"fill:]]..buttonColour..[[;\" />]] ..\n\t\t\t\t\t\t\t   [[<text x=\"500\" y=\"940\" class=\"fmmiddle\">Save Current Location</text>]]\n\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t\t\t   [[<rect x=\"800\" y=\"900\" rx=\"10\" ry=\"10\" width=\"400\" height=\"60\" style=\"fill:]]..buttonColour..[[;\" />]] ..\n\t\t\t\t\t\t\t   [[<text x=\"1000\" y=\"940\" class=\"fmmiddle\">Update Location</text>]]\n\n\tscreenOutput = screenOutput ..\n\t\t\t\t\t\t\t   [[<rect x=\"1300\" y=\"900\" rx=\"10\" ry=\"10\" width=\"400\" height=\"60\" style=\"fill:]]..buttonColour..[[;\" />]] ..\n\t\t\t\t\t\t\t   [[<text x=\"1500\" y=\"940\" class=\"fmmiddle\">Delete Location</text>]]\n\t\t\t\t\t\t\t   \n--\tscreenOutput = screenOutput .. [[<text x=\"880\" y=\"115\" class=\"fmstartl\">Toggle Location Tags -- </text>]]\n--\tscreenOutput = screenOutput .. [[<text x=\"700\" y=\"200\" class=\"fmstartl\">Filters</text>]]\n\n\tscreenOutput = screenOutput .. [[<svg x=\"1400\" y=\"70\" >\n\t\t\t\t\t\t<rect width=\"60\" height=\"60\" style=\"fill:]]..marketIconColour..\n\t\t\t\t\t[[;\" /><image x=\"10\" y=\"10\" width=\"40\" height=\"40\" ]]..pngMarketIcon..[[/></svg>]]\n\tscreenOutput = screenOutput .. [[<svg x=\"1500\" y=\"70\" >\n\t\t\t\t\t\t<rect width=\"60\" height=\"60\" style=\"fill:]]..mineIconColour..\n\t\t\t\t\t[[;\" /><image x=\"10\" y=\"10\" width=\"40\" height=\"40\" ]]..pngMineIcon..[[/></svg>]]\n\tscreenOutput = screenOutput .. [[<svg x=\"1600\" y=\"70\" >\n\t\t\t\t\t\t<rect width=\"60\" height=\"60\" style=\"fill:]]..crashIconColour..\n\t\t\t\t\t[[;\" /><image x=\"10\" y=\"10\" width=\"40\" height=\"40\" ]]..pngCrashIcon..[[/></svg>]]\n\tscreenOutput = screenOutput .. [[<svg x=\"1700\" y=\"70\" >\n\t\t\t\t\t\t<rect width=\"60\" height=\"60\" style=\"fill:]]..baseIconColour..\n                          [[;\" /><image x=\"10\" y=\"10\" width=\"40\" height=\"40\" ]]..pngBaseIcon..[[/></svg>]]\n\tscreenOutput = screenOutput .. [[<svg x=\"1800\" y=\"70\" >\n\t\t\t\t\t\t<rect width=\"60\" height=\"60\" style=\"fill:]]..favouriteIconColour..\n                          [[;\" /><image x=\"10\" y=\"10\" width=\"40\" height=\"40\" ]]..pngFavouriteIcon..[[/></svg>]]\n\n\n\tscreenOutput = screenOutput .. [[<svg x=\"720\" y=\"140\" >]]\n\tif currentFilter == \"PlanetFilter\" then\n\t\t\t\t\t\tscreenOutput = screenOutput .. [[<rect width=\"95\" height=\"95\" style=\"fill:]]..planetIconColour..[[;\" />]]\n\tend\n\tscreenOutput = screenOutput .. [[<image width=\"75\" height=\"75\" x=\"10\" y=\"10\" ]]..pngPlanetIcon..[[/></svg>]]\n\n\tscreenOutput = screenOutput .. [[<svg x=\"720\" y=\"240\" >]]\n\tif currentFilter == \"MarketFilter\" then\n\t\t\t\t\t\tscreenOutput = screenOutput .. [[<rect width=\"95\" height=\"95\" style=\"fill:]]..marketIconColour..[[;\" />]]\n\tend\n\tscreenOutput = screenOutput .. [[<image width=\"75\" height=\"75\" x=\"10\" y=\"10\" ]]..pngMarketIcon..[[/></svg>]]\n\t\n\tscreenOutput = screenOutput .. [[<svg x=\"720\" y=\"340\" >]]\n\tif currentFilter == \"MineFilter\" then\n\t\t\t\t\t\tscreenOutput = screenOutput .. [[<rect width=\"95\" height=\"95\" style=\"fill:]]..mineIconColour..[[;\" />]]\n\tend\n\tscreenOutput = screenOutput .. [[<image width=\"75\" height=\"75\" x=\"10\" y=\"10\" ]]..pngMineIcon..[[/></svg>]]\n\t\n\tscreenOutput = screenOutput .. [[<svg x=\"720\" y=\"440\" >]]\n\tif currentFilter == \"CrashFilter\" then\n\t\t\t\t\t\tscreenOutput = screenOutput .. [[<rect width=\"95\" height=\"95\" style=\"fill:]]..crashIconColour..[[;\" />]]\n\tend\n\tscreenOutput = screenOutput .. [[<image width=\"75\" height=\"75\" x=\"10\" y=\"10\" ]]..pngCrashIcon..[[/></svg>]]\n\t\n\tscreenOutput = screenOutput .. [[<svg x=\"720\" y=\"540\" >]]\n\tif currentFilter == \"BaseFilter\" then\n\t\t\t\t\t\tscreenOutput = screenOutput .. [[<rect width=\"95\" height=\"95\" style=\"fill:]]..baseIconColour..[[;\" />]]\n\tend\n\tscreenOutput = screenOutput .. [[<image width=\"75\" height=\"75\" x=\"10\" y=\"10\" ]]..pngBaseIcon..[[/></svg>]]\n\n\tscreenOutput = screenOutput .. [[<svg x=\"720\" y=\"640\" >]]\n\tif currentFilter == \"FavouriteFilter\" then\n\t\t\t\t\t\tscreenOutput = screenOutput .. [[<rect width=\"95\" height=\"95\" style=\"fill:]]..favouriteIconColour..[[;\" />]]\n\tend\n\tscreenOutput = screenOutput .. [[<image width=\"75\" height=\"75\" x=\"10\" y=\"10\" ]]..pngFavouriteIcon..[[/></svg>]]\n\n\t\t\t\t\t\t\n\tscreenOutput = screenOutput .. [[<svg x=\"720\" y=\"790\" >]]\n\tscreenOutput = screenOutput .. [[<rect width=\"75\" height=\"75\" x=\"10\" y=\"10\" style=\"fill:]]..buttonColour..[[;\" />\n\t\t\t\t\t\t<text x=\"45\" y=\"30\" class=\"fmmiddles\">(sort)</text>\n\t\t\t\t\t\t<text x=\"45\" y=\"60\" class=\"fmmiddle\">]]..sortOrder..[[</text>\n\t\t\t\t\t\t</svg>]]\n\n\tDrawSVG(screenOutput)\n\n--\tforceRedraw = false\nend\n\n-----------------------------------------------\n-- Execute\n-----------------------------------------------\n\nunit.hide()\n--dbUpdate()\nInitiateClickAreas()\n\nlastPlanetSelected = myDatabank.getStringValue(\"lastPlanetSelected\")\nif lastPlanetSelected == \"\" then lastPlanetSelected = \"Alioth\" end\ncurrentFilter = myDatabank.getStringValue(\"currentFilter\")\nif currentFilter == \"\" then currentFilter = \"PlanetFilter\" end\nsortOrder = myDatabank.getStringValue(\"sortOrder\")\nif sortOrder == \"\" then sortOrder = \"az\" end\n\nbuildPlanetLocList(lastPlanetSelected)\nDrawPlanetList()\nsystem.print(\"Running\")\nloadLocationTable()\nlastNewLoc = myDatabank.getIntValue(\"lastNewLoc\")\n--system.print(\"lastNewLoc\"..lastNewLoc)\nif lastNewLoc == nil or lastNewLoc==0 then\n    --this is th first time satnav has run on this databank\n    system.print(\"Initialising SatNav Databank\")\n    CheckClick(0, 0, \"LoadSatNavLocations\")\n    lastNewLoc =1\n    myDatabank.setIntValue(\"lastNewLoc\",lastNewLoc)\n    system.print(\"Completed SatNav Databank\")\nend\nunit.setTimer(\"update\",30)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"7"},{"code":"DrawPlanetList()","filter":{"args":[{"variable":"*"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"8"},{"code":"local cmdPattern = [[([hHuUdDcCaAlLxXbBrR])]]\nlocal locPattern = [['([%w ]*)']]\nlocal num        = ' *[+-]?%d+%.?%d*e?[+-]?%d*'\nlocal posPattern = '(::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\n                   num ..  ',' .. num .. '})'\n-- echo command text\nsystem.print([[SatNav command recieved: \"]]..text..[[\"]])\n\n--get command\nlocal cmd= string.lower(string.match(text,cmdPattern,1))\n--if not(cmd==nil) then system.print(\"Command = \"..cmd) end\n--get first location Name\nlocal locName1= string.match(text,locPattern,1)\n--if not(locName1==nil) then system.print(\"locName1:\"..locName1) end\n--get first ::pos\n--local locPos1Sys,locPos1Bdy,locPos1X,locPos1Y,locPos1Z = string.match(text,posPattern,1)\nlocal locPos1 = string.match(text,posPattern,1)\n--if not(locPos1Sys==nil) then system.print(\"locPos1:\"..locPos1Sys..locPos1Bdy..locPos1X..locPos1Y..locPos1Z) end\n--if not(locPos1==nil) then system.print(\"locPos1:\"..locPos1) end\n\n\n--if string.sub(text,1,2) == \"u \" then\nif cmd==\"u\" then\n    if locName1==nil and locPos1 == nil then \n        system.print(\"Invalid/mising location in command: \"..text) \n    elseif lastLocationSelected==\"\" or lastLocationSelected==nil then -- no location selected on screen\n            system.print(\"Select a valid location from SatNav list and re-enter command\")\n    elseif not(locName1==nil) and locPos1 == nil then -- just a name change\n        updateLocationName(locName1,nil)\n        if displayPlanetList[1] ~= \"\" then\n            refreshDisplay()\n            lastLocationSelected = \"\"\n            DrawPlanetList()\n        end\n    elseif locName1==nil and not(locPos1 == nil) then -- coords change\n        updateLocationName(lastLocationSelected,locPos1)\n        if displayPlanetList[1] ~= \"\" then\n            refreshDisplay()\n            lastLocationSelected = \"\"\n            DrawPlanetList()\n        end\n    elseif not(locName1==nil) and not(locPos1 == nil) then -- name and coords change\n        updateLocationName(locName1,locPos1)\n        if displayPlanetList[1] ~= \"\" then\n            refreshDisplay()\n            lastLocationSelected = \"\"\n            DrawPlanetList()\n        end\n    else\n            system.print(\"Unknown update error\")\n    end\nelseif text == \"dump SatNav\" then\n    dumpSatNavLocationsToLogfile()  \nelseif text == \"d SatNav\" then\n    if lastLocationSelected==\"\" or lastLocationSelected==nil then \n        system.print(\"Select a valid location from SatNav list and re-enter command\")\n    else\n        deleteLocationName(lastLocationSelected)\n    end\n    if displayPlanetList[1] ~= \"\" then\n        refreshDisplay()\n        lastLocationSelected = \"\"\n        DrawPlanetList()\n\n    end\nelseif cmd == \"d\" then\n    if locName1==nil then system.print(\"Invalid location name in command: \"..text)\n    else\n        deleteLocationName(locName1)\n    end\n    if displayPlanetList[1] ~= \"\" then\n        refreshDisplay()\n        lastLocationSelected = \"\"\n        DrawPlanetList()\n    end\nelseif text == \"c SatNav\" then\n    system.print(\"ClearSatNavLocations\")\n    CheckClick(0, 0, \"ClearSatNavLocations\")\nelseif text == \"c Hud\" then\n    if HUD == \"Dimencia\" then\n        system.print(\"ClearHudLocations\")\n        CheckClick(0, 0, \"ClearHudLocations\")\n    else\n        system.print(\"ClearHudLocations not available in standalone mode\")\n    end\nelseif text == \"l SatNav\" then\n    system.print(\"LoadSatNavLocations\")\n    CheckClick(0, 0, \"LoadSatNavLocations\")\nelseif text == \"l Hud\" then\n    if HUD == \"Dimencia\" then\n        system.print(\"LoadHudLocations\")\n        CheckClick(0, 0, \"LoadHudLocations\")\n    else\n        system.print(\"LoadHudLocations not available in standalone mode\")\n    end\nelseif text == \"backup\" then\n    if dupSatnavDB then\n        system.print(\"BackupSatNavDB\")\n        backupSatnavDB()\n    else\n        system.print(\"Please link an empty databank to the programming board\")\n    end\nelseif text == \"restore\" then\n    if dupSatnavDB then\n        system.print(\"RestoreSatNavDB\")\n        restoreSatnavDB()\n        refreshDisplay()\n        lastLocationSelected = \"\"\n        DrawPlanetList()\n    else\n        system.print(\"Please link an empty databank to the programming board\")\n    end\nelseif cmd == \"a\" then\n    if locName1==nil then system.print(\"Invalid location name in command: \"..text)\n    else\n        newLocation(locName1, locPos1)\n        if displayPlanetList[1] ~= \"\" then\n            refreshDisplay()\n            lastLocationSelected = \"\"\n            DrawPlanetList()\n        end\n    end\nelseif cmd == \"h\" then\n    system.print(\"SatNav Help:\")\n    system.print(\"u 'location name' ::pos{a,b,c,d,e}\")\n    system.print(\"    -update name and optionally ::pos of selected location\")\n    system.print(\"a 'location name' ::pos{a,b,c,d,e}\")\n    system.print(\"    -add a new location\")\n    system.print(\"d SatNav\")\n    system.print(\"    -delete the selected location\")\n    system.print(\"c SatNav\")\n    system.print(\"    -clear the SatNav databank\")\n    system.print(\"l SatNav\")\n    system.print(\"    -reload the default SatNav locations\")\n    system.print(\"backup\")\n    system.print(\"    -create a backup of SatNav databank\")\n    system.print(\"restore\")\n    system.print(\"    -restore SatNav databank from backup\")\n    system.print(\"dump SatNav\")\n    system.print(\"    -write all location to the DU Logfile\")\n    system.print(\"h\")\n    system.print(\"    -this help\")\nelse system.print(\"Unrecognised SatNav command\")\nend","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"9"}],"methods":[],"events":[]}
